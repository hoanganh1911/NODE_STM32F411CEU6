
NODE_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800628c  0800628c  0001628c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006364  08006364  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006364  08006364  00016364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800636c  0800636c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006370  08006370  00016370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041bc  20000080  080063f4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000423c  080063f4  0002423c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c52f  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003581  00000000  00000000  0003c5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  0003fb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  00041348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194ff  00000000  00000000  00042a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab07  00000000  00000000  0005bf0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c888  00000000  00000000  00076a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011329e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069ac  00000000  00000000  001132f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006274 	.word	0x08006274

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08006274 	.word	0x08006274

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	2000009c 	.word	0x2000009c
 8000514:	20000150 	.word	0x20000150

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b08e      	sub	sp, #56	; 0x38
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fc3d 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f857 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f99b 	bl	8000860 <MX_GPIO_Init>
  MX_I2C1_Init();
 800052a:	f000 f8bb 	bl	80006a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800052e:	f000 f8e7 	bl	8000700 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000532:	f000 f96b 	bl	800080c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000536:	f000 f919 	bl	800076c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 800053a:	481e      	ldr	r0, [pc, #120]	; (80005b4 <main+0x9c>)
 800053c:	f002 fc30 	bl	8002da0 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TFT_LED_GPIO_Port, TFT_LED_Pin, 1);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000546:	481c      	ldr	r0, [pc, #112]	; (80005b8 <main+0xa0>)
 8000548:	f000 fef4 	bl	8001334 <HAL_GPIO_WritePin>
  ID = readID();
 800054c:	f005 fc62 	bl	8005e14 <readID>
 8000550:	4603      	mov	r3, r0
 8000552:	461a      	mov	r2, r3
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <main+0xa4>)
 8000556:	801a      	strh	r2, [r3, #0]
  HAL_Delay(100);
 8000558:	2064      	movs	r0, #100	; 0x64
 800055a:	f000 fc61 	bl	8000e20 <HAL_Delay>
  ds3231_setTime(&time);
 800055e:	4818      	ldr	r0, [pc, #96]	; (80005c0 <main+0xa8>)
 8000560:	f004 fe63 	bl	800522a <ds3231_setTime>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of KeyMatrix_Task */
  osThreadDef(KeyMatrix_Task, StartKeyMatrix_Task, osPriorityNormal, 0, 128);
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <main+0xac>)
 8000566:	f107 041c 	add.w	r4, r7, #28
 800056a:	461d      	mov	r5, r3
 800056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000570:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KeyMatrix_TaskHandle = osThreadCreate(osThread(KeyMatrix_Task), NULL);
 8000578:	f107 031c 	add.w	r3, r7, #28
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fb3f 	bl	8003c02 <osThreadCreate>
 8000584:	4603      	mov	r3, r0
 8000586:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <main+0xb0>)
 8000588:	6013      	str	r3, [r2, #0]

  /* definition and creation of TFT_Task */
  osThreadDef(TFT_Task, StartTFT_Task, osPriorityAboveNormal, 0, 128);
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <main+0xb4>)
 800058c:	463c      	mov	r4, r7
 800058e:	461d      	mov	r5, r3
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TFT_TaskHandle = osThreadCreate(osThread(TFT_Task), NULL);
 800059c:	463b      	mov	r3, r7
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 fb2e 	bl	8003c02 <osThreadCreate>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <main+0xb8>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ac:	f003 fb22 	bl	8003bf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x98>
 80005b2:	bf00      	nop
 80005b4:	200003fc 	.word	0x200003fc
 80005b8:	40020000 	.word	0x40020000
 80005bc:	20000490 	.word	0x20000490
 80005c0:	20000000 	.word	0x20000000
 80005c4:	080062a8 	.word	0x080062a8
 80005c8:	20000488 	.word	0x20000488
 80005cc:	080062c4 	.word	0x080062c4
 80005d0:	2000048c 	.word	0x2000048c

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 fd7c 	bl	80060e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b27      	ldr	r3, [pc, #156]	; (800069c <SystemClock_Config+0xc8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a26      	ldr	r2, [pc, #152]	; (800069c <SystemClock_Config+0xc8>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <SystemClock_Config+0xc8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <SystemClock_Config+0xcc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <SystemClock_Config+0xcc>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <SystemClock_Config+0xcc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000650:	2305      	movs	r3, #5
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fe3f 	bl	80022dc <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 f981 	bl	800096a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2103      	movs	r1, #3
 8000684:	4618      	mov	r0, r3
 8000686:	f002 f8a1 	bl	80027cc <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000690:	f000 f96b 	bl	800096a <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	; 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <MX_I2C1_Init+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006b0:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_I2C1_Init+0x58>)
 80006b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006e2:	f000 fe65 	bl	80013b0 <HAL_I2C_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ec:	f000 f93d 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000350 	.word	0x20000350
 80006f8:	40005400 	.word	0x40005400
 80006fc:	000186a0 	.word	0x000186a0

08000700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_SPI1_Init+0x64>)
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <MX_SPI1_Init+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_SPI1_Init+0x64>)
 800070c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_SPI1_Init+0x64>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_SPI1_Init+0x64>)
 800074c:	220a      	movs	r2, #10
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_SPI1_Init+0x64>)
 8000752:	f002 fa4d 	bl	8002bf0 <HAL_SPI_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800075c:	f000 f905 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200003a4 	.word	0x200003a4
 8000768:	40013000 	.word	0x40013000

0800076c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_TIM1_Init+0x98>)
 800078a:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <MX_TIM1_Init+0x9c>)
 800078c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_TIM1_Init+0x98>)
 8000790:	2263      	movs	r2, #99	; 0x63
 8000792:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_TIM1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_TIM1_Init+0x98>)
 800079c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_TIM1_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_TIM1_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_TIM1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007b4:	4813      	ldr	r0, [pc, #76]	; (8000804 <MX_TIM1_Init+0x98>)
 80007b6:	f002 faa4 	bl	8002d02 <HAL_TIM_Base_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007c0:	f000 f8d3 	bl	800096a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	4619      	mov	r1, r3
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_TIM1_Init+0x98>)
 80007d2:	f002 fca9 	bl	8003128 <HAL_TIM_ConfigClockSource>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007dc:	f000 f8c5 	bl	800096a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_TIM1_Init+0x98>)
 80007ee:	f002 fea5 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007f8:	f000 f8b7 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200003fc 	.word	0x200003fc
 8000808:	40010000 	.word	0x40010000

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f002 fefc 	bl	8003640 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f88c 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000444 	.word	0x20000444
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_GPIO_Init+0xb8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a26      	ldr	r2, [pc, #152]	; (8000918 <MX_GPIO_Init+0xb8>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_GPIO_Init+0xb8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <MX_GPIO_Init+0xb8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <MX_GPIO_Init+0xb8>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_GPIO_Init+0xb8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_GPIO_Init+0xb8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <MX_GPIO_Init+0xb8>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_GPIO_Init+0xb8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_GPIO_Init+0xb8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a11      	ldr	r2, [pc, #68]	; (8000918 <MX_GPIO_Init+0xb8>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_GPIO_Init+0xb8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

//  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
//
//  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Relay_1_Pin|Relay_2_Pin|RS485_DERE_Pin|TFT_DB3_Pin
 80008e6:	2200      	movs	r2, #0
 80008e8:	f649 7113 	movw	r1, #40723	; 0x9f13
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <MX_GPIO_Init+0xbc>)
 80008ee:	f000 fd21 	bl	8001334 <HAL_GPIO_WritePin>
//  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
//
//  /*Configure GPIO pins : Relay_1_Pin Relay_2_Pin RS485_DERE_Pin TFT_DB3_Pin
//                           TFT_DB2_Pin TFT_DB1_Pin TFT_DB0_Pin TFT_LED_Pin
//                           TFT_RST_Pin */
  GPIO_InitStruct.Pin = Relay_1_Pin|Relay_2_Pin|RS485_DERE_Pin|TFT_DB3_Pin
 80008f2:	f649 7313 	movw	r3, #40723	; 0x9f13
 80008f6:	617b      	str	r3, [r7, #20]
                          |TFT_DB2_Pin|TFT_DB1_Pin|TFT_DB0_Pin|TFT_LED_Pin
                          |TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_GPIO_Init+0xbc>)
 800090c:	f000 fb8e 	bl	800102c <HAL_GPIO_Init>
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
//
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000

08000920 <StartKeyMatrix_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartKeyMatrix_Task */
void StartKeyMatrix_Task(void const * argument)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000928:	2001      	movs	r0, #1
 800092a:	f003 f9b6 	bl	8003c9a <osDelay>
 800092e:	e7fb      	b.n	8000928 <StartKeyMatrix_Task+0x8>

08000930 <StartTFT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTFT_Task */
void StartTFT_Task(void const * argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTFT_Task */
  /* Infinite loop */
  for(;;)
  {
	  ds3231_getTime(&time);
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <StartTFT_Task+0x18>)
 800093a:	f004 fbfd 	bl	8005138 <ds3231_getTime>
	  osDelay(1);
 800093e:	2001      	movs	r0, #1
 8000940:	f003 f9ab 	bl	8003c9a <osDelay>
	  ds3231_getTime(&time);
 8000944:	e7f8      	b.n	8000938 <StartTFT_Task+0x8>
 8000946:	bf00      	nop
 8000948:	20000000 	.word	0x20000000

0800094c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095e:	f000 fa3f 	bl	8000de0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096e:	b672      	cpsid	i
}
 8000970:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000972:	e7fe      	b.n	8000972 <Error_Handler+0x8>

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_MspInit+0x60>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <HAL_MspInit+0x60>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_MspInit+0x60>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_MspInit+0x60>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <HAL_MspInit+0x60>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_MspInit+0x60>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2105      	movs	r1, #5
 80009b6:	f06f 0003 	mvn.w	r0, #3
 80009ba:	f000 fb0d 	bl	8000fd8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	210f      	movs	r1, #15
 80009c2:	f06f 0001 	mvn.w	r0, #1
 80009c6:	f000 fb07 	bl	8000fd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <HAL_I2C_MspInit+0x84>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d12c      	bne.n	8000a54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1c:	2312      	movs	r3, #18
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	480c      	ldr	r0, [pc, #48]	; (8000a64 <HAL_I2C_MspInit+0x8c>)
 8000a34:	f000 fafa 	bl	800102c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a46:	6413      	str	r3, [r2, #64]	; 0x40
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400

08000a68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	; (8000aec <HAL_SPI_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12b      	bne.n	8000ae2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_SPI_MspInit+0x88>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <HAL_SPI_MspInit+0x88>)
 8000a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_SPI_MspInit+0x88>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_SPI_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <HAL_SPI_MspInit+0x88>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_SPI_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ac2:	23e0      	movs	r3, #224	; 0xe0
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <HAL_SPI_MspInit+0x8c>)
 8000ade:	f000 faa5 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40013000 	.word	0x40013000
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <HAL_TIM_Base_MspInit+0x3c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d10d      	bne.n	8000b26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_TIM_Base_MspInit+0x40>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a09      	ldr	r2, [pc, #36]	; (8000b38 <HAL_TIM_Base_MspInit+0x40>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <HAL_TIM_Base_MspInit+0x40>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40010000 	.word	0x40010000
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_UART_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12b      	bne.n	8000bb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b96:	230c      	movs	r3, #12
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_UART_MspInit+0x8c>)
 8000bb2:	f000 fa3b 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08e      	sub	sp, #56	; 0x38
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <HAL_InitTick+0xe8>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a33      	ldr	r2, [pc, #204]	; (8000cb4 <HAL_InitTick+0xe8>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <HAL_InitTick+0xe8>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf8:	f107 0210 	add.w	r2, r7, #16
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 ffc2 	bl	8002b8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d103      	bne.n	8000c1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c12:	f001 ff93 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8000c16:	6378      	str	r0, [r7, #52]	; 0x34
 8000c18:	e004      	b.n	8000c24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c1a:	f001 ff8f 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c26:	4a24      	ldr	r2, [pc, #144]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	0c9b      	lsrs	r3, r3, #18
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000c32:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <HAL_InitTick+0xf0>)
 8000c34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <HAL_InitTick+0xf0>)
 8000c3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c40:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000c42:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <HAL_InitTick+0xf0>)
 8000c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c46:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <HAL_InitTick+0xf0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <HAL_InitTick+0xf0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_InitTick+0xf0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000c5a:	4818      	ldr	r0, [pc, #96]	; (8000cbc <HAL_InitTick+0xf0>)
 8000c5c:	f002 f851 	bl	8002d02 <HAL_TIM_Base_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d11b      	bne.n	8000ca6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000c6e:	4813      	ldr	r0, [pc, #76]	; (8000cbc <HAL_InitTick+0xf0>)
 8000c70:	f002 f8f0 	bl	8002e54 <HAL_TIM_Base_Start_IT>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d111      	bne.n	8000ca6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c82:	201c      	movs	r0, #28
 8000c84:	f000 f9c4 	bl	8001010 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b0f      	cmp	r3, #15
 8000c8c:	d808      	bhi.n	8000ca0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	201c      	movs	r0, #28
 8000c94:	f000 f9a0 	bl	8000fd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c98:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <HAL_InitTick+0xf4>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e002      	b.n	8000ca6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ca6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3738      	adds	r7, #56	; 0x38
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	431bde83 	.word	0x431bde83
 8000cbc:	20000494 	.word	0x20000494
 8000cc0:	20000010 	.word	0x20000010

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PCF_INT_Pin);
 8000cf4:	2080      	movs	r0, #128	; 0x80
 8000cf6:	f000 fb37 	bl	8001368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <TIM2_IRQHandler+0x10>)
 8000d06:	f002 f907 	bl	8002f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000494 	.word	0x20000494

08000d14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_INT_Pin);
 8000d18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d1c:	f000 fb24 	bl	8001368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d4e:	490e      	ldr	r1, [pc, #56]	; (8000d88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d50:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d64:	4c0b      	ldr	r4, [pc, #44]	; (8000d94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d72:	f7ff ffd7 	bl	8000d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d76:	f005 f98d 	bl	8006094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7a:	f7ff fbcd 	bl	8000518 <main>
  bx  lr    
 8000d7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d8c:	08006374 	.word	0x08006374
  ldr r2, =_sbss
 8000d90:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d94:	2000423c 	.word	0x2000423c

08000d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_Init+0x40>)
 8000da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_Init+0x40>)
 8000db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_Init+0x40>)
 8000dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f8fc 	bl	8000fc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	200f      	movs	r0, #15
 8000dcc:	f7ff fefe 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f7ff fdd0 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000014 	.word	0x20000014
 8000e04:	200004dc 	.word	0x200004dc

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200004dc 	.word	0x200004dc

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffde 	bl	8000e08 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000014 	.word	0x20000014

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ff4c 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fea:	f7ff ff61 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8000fee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	6978      	ldr	r0, [r7, #20]
 8000ff6:	f7ff ffb1 	bl	8000f5c <NVIC_EncodePriority>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff80 	bl	8000f08 <__NVIC_SetPriority>
}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff54 	bl	8000ecc <__NVIC_EnableIRQ>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
 8001046:	e159      	b.n	80012fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001048:	2201      	movs	r2, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	429a      	cmp	r2, r3
 8001062:	f040 8148 	bne.w	80012f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b01      	cmp	r3, #1
 8001070:	d005      	beq.n	800107e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107a:	2b02      	cmp	r3, #2
 800107c:	d130      	bne.n	80010e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b4:	2201      	movs	r2, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	f003 0201 	and.w	r2, r3, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d017      	beq.n	800111c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d123      	bne.n	8001170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	220f      	movs	r2, #15
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	691a      	ldr	r2, [r3, #16]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	08da      	lsrs	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3208      	adds	r2, #8
 800116a:	69b9      	ldr	r1, [r7, #24]
 800116c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0203 	and.w	r2, r3, #3
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 80a2 	beq.w	80012f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b57      	ldr	r3, [pc, #348]	; (8001314 <HAL_GPIO_Init+0x2e8>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a56      	ldr	r2, [pc, #344]	; (8001314 <HAL_GPIO_Init+0x2e8>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	4b54      	ldr	r3, [pc, #336]	; (8001314 <HAL_GPIO_Init+0x2e8>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ce:	4a52      	ldr	r2, [pc, #328]	; (8001318 <HAL_GPIO_Init+0x2ec>)
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	220f      	movs	r2, #15
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a49      	ldr	r2, [pc, #292]	; (800131c <HAL_GPIO_Init+0x2f0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0x202>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a48      	ldr	r2, [pc, #288]	; (8001320 <HAL_GPIO_Init+0x2f4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0x1fe>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a47      	ldr	r2, [pc, #284]	; (8001324 <HAL_GPIO_Init+0x2f8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00d      	beq.n	8001226 <HAL_GPIO_Init+0x1fa>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a46      	ldr	r2, [pc, #280]	; (8001328 <HAL_GPIO_Init+0x2fc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x1f6>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a45      	ldr	r2, [pc, #276]	; (800132c <HAL_GPIO_Init+0x300>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_GPIO_Init+0x1f2>
 800121a:	2304      	movs	r3, #4
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x204>
 800121e:	2307      	movs	r3, #7
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x204>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x204>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x204>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x204>
 800122e:	2300      	movs	r3, #0
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001240:	4935      	ldr	r1, [pc, #212]	; (8001318 <HAL_GPIO_Init+0x2ec>)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b38      	ldr	r3, [pc, #224]	; (8001330 <HAL_GPIO_Init+0x304>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a2f      	ldr	r2, [pc, #188]	; (8001330 <HAL_GPIO_Init+0x304>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <HAL_GPIO_Init+0x304>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a24      	ldr	r2, [pc, #144]	; (8001330 <HAL_GPIO_Init+0x304>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a2:	4b23      	ldr	r3, [pc, #140]	; (8001330 <HAL_GPIO_Init+0x304>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c6:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <HAL_GPIO_Init+0x304>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_GPIO_Init+0x304>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f0:	4a0f      	ldr	r2, [pc, #60]	; (8001330 <HAL_GPIO_Init+0x304>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	f67f aea2 	bls.w	8001048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40013c00 	.word	0x40013c00

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d006      	beq.n	800138c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f806 	bl	8001398 <HAL_GPIO_EXTI_Callback>
  }
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e12b      	b.n	800161a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d106      	bne.n	80013dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fafe 	bl	80009d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2224      	movs	r2, #36	; 0x24
 80013e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001402:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001412:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001414:	f001 fb92 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8001418:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a81      	ldr	r2, [pc, #516]	; (8001624 <HAL_I2C_Init+0x274>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d807      	bhi.n	8001434 <HAL_I2C_Init+0x84>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4a80      	ldr	r2, [pc, #512]	; (8001628 <HAL_I2C_Init+0x278>)
 8001428:	4293      	cmp	r3, r2
 800142a:	bf94      	ite	ls
 800142c:	2301      	movls	r3, #1
 800142e:	2300      	movhi	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	e006      	b.n	8001442 <HAL_I2C_Init+0x92>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4a7d      	ldr	r2, [pc, #500]	; (800162c <HAL_I2C_Init+0x27c>)
 8001438:	4293      	cmp	r3, r2
 800143a:	bf94      	ite	ls
 800143c:	2301      	movls	r3, #1
 800143e:	2300      	movhi	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0e7      	b.n	800161a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4a78      	ldr	r2, [pc, #480]	; (8001630 <HAL_I2C_Init+0x280>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0c9b      	lsrs	r3, r3, #18
 8001454:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	430a      	orrs	r2, r1
 8001468:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a6a      	ldr	r2, [pc, #424]	; (8001624 <HAL_I2C_Init+0x274>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d802      	bhi.n	8001484 <HAL_I2C_Init+0xd4>
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	3301      	adds	r3, #1
 8001482:	e009      	b.n	8001498 <HAL_I2C_Init+0xe8>
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800148a:	fb02 f303 	mul.w	r3, r2, r3
 800148e:	4a69      	ldr	r2, [pc, #420]	; (8001634 <HAL_I2C_Init+0x284>)
 8001490:	fba2 2303 	umull	r2, r3, r2, r3
 8001494:	099b      	lsrs	r3, r3, #6
 8001496:	3301      	adds	r3, #1
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	430b      	orrs	r3, r1
 800149e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	495c      	ldr	r1, [pc, #368]	; (8001624 <HAL_I2C_Init+0x274>)
 80014b4:	428b      	cmp	r3, r1
 80014b6:	d819      	bhi.n	80014ec <HAL_I2C_Init+0x13c>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1e59      	subs	r1, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c6:	1c59      	adds	r1, r3, #1
 80014c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014cc:	400b      	ands	r3, r1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00a      	beq.n	80014e8 <HAL_I2C_Init+0x138>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1e59      	subs	r1, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80014e0:	3301      	adds	r3, #1
 80014e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e6:	e051      	b.n	800158c <HAL_I2C_Init+0x1dc>
 80014e8:	2304      	movs	r3, #4
 80014ea:	e04f      	b.n	800158c <HAL_I2C_Init+0x1dc>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d111      	bne.n	8001518 <HAL_I2C_Init+0x168>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1e58      	subs	r0, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6859      	ldr	r1, [r3, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	440b      	add	r3, r1
 8001502:	fbb0 f3f3 	udiv	r3, r0, r3
 8001506:	3301      	adds	r3, #1
 8001508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf0c      	ite	eq
 8001510:	2301      	moveq	r3, #1
 8001512:	2300      	movne	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	e012      	b.n	800153e <HAL_I2C_Init+0x18e>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	1e58      	subs	r0, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6859      	ldr	r1, [r3, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	0099      	lsls	r1, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	fbb0 f3f3 	udiv	r3, r0, r3
 800152e:	3301      	adds	r3, #1
 8001530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf0c      	ite	eq
 8001538:	2301      	moveq	r3, #1
 800153a:	2300      	movne	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_I2C_Init+0x196>
 8001542:	2301      	movs	r3, #1
 8001544:	e022      	b.n	800158c <HAL_I2C_Init+0x1dc>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10e      	bne.n	800156c <HAL_I2C_Init+0x1bc>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1e58      	subs	r0, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6859      	ldr	r1, [r3, #4]
 8001556:	460b      	mov	r3, r1
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	440b      	add	r3, r1
 800155c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001560:	3301      	adds	r3, #1
 8001562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800156a:	e00f      	b.n	800158c <HAL_I2C_Init+0x1dc>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	1e58      	subs	r0, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	0099      	lsls	r1, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001582:	3301      	adds	r3, #1
 8001584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	6809      	ldr	r1, [r1, #0]
 8001590:	4313      	orrs	r3, r2
 8001592:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69da      	ldr	r2, [r3, #28]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6911      	ldr	r1, [r2, #16]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68d2      	ldr	r2, [r2, #12]
 80015c6:	4311      	orrs	r1, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	430b      	orrs	r3, r1
 80015ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0201 	orr.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2220      	movs	r2, #32
 8001606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	000186a0 	.word	0x000186a0
 8001628:	001e847f 	.word	0x001e847f
 800162c:	003d08ff 	.word	0x003d08ff
 8001630:	431bde83 	.word	0x431bde83
 8001634:	10624dd3 	.word	0x10624dd3

08001638 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af02      	add	r7, sp, #8
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	461a      	mov	r2, r3
 8001644:	460b      	mov	r3, r1
 8001646:	817b      	strh	r3, [r7, #10]
 8001648:	4613      	mov	r3, r2
 800164a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff fbdc 	bl	8000e08 <HAL_GetTick>
 8001650:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b20      	cmp	r3, #32
 800165c:	f040 80e0 	bne.w	8001820 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2319      	movs	r3, #25
 8001666:	2201      	movs	r2, #1
 8001668:	4970      	ldr	r1, [pc, #448]	; (800182c <HAL_I2C_Master_Transmit+0x1f4>)
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 fc58 	bl	8001f20 <I2C_WaitOnFlagUntilTimeout>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001676:	2302      	movs	r3, #2
 8001678:	e0d3      	b.n	8001822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_I2C_Master_Transmit+0x50>
 8001684:	2302      	movs	r3, #2
 8001686:	e0cc      	b.n	8001822 <HAL_I2C_Master_Transmit+0x1ea>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b01      	cmp	r3, #1
 800169c:	d007      	beq.n	80016ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 0201 	orr.w	r2, r2, #1
 80016ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2221      	movs	r2, #33	; 0x21
 80016c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2210      	movs	r2, #16
 80016ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	893a      	ldrh	r2, [r7, #8]
 80016de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4a50      	ldr	r2, [pc, #320]	; (8001830 <HAL_I2C_Master_Transmit+0x1f8>)
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016f0:	8979      	ldrh	r1, [r7, #10]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	6a3a      	ldr	r2, [r7, #32]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 fac2 	bl	8001c80 <I2C_MasterRequestWrite>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e08d      	b.n	8001822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800171c:	e066      	b.n	80017ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	6a39      	ldr	r1, [r7, #32]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 fcd2 	bl	80020cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00d      	beq.n	800174a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b04      	cmp	r3, #4
 8001734:	d107      	bne.n	8001746 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001744:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e06b      	b.n	8001822 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	781a      	ldrb	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	3b01      	subs	r3, #1
 8001768:	b29a      	uxth	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001772:	3b01      	subs	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b04      	cmp	r3, #4
 8001786:	d11b      	bne.n	80017c0 <HAL_I2C_Master_Transmit+0x188>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178c:	2b00      	cmp	r3, #0
 800178e:	d017      	beq.n	80017c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	6a39      	ldr	r1, [r7, #32]
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 fcc2 	bl	800214e <I2C_WaitOnBTFFlagUntilTimeout>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00d      	beq.n	80017ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d107      	bne.n	80017e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e01a      	b.n	8001822 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d194      	bne.n	800171e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2220      	movs	r2, #32
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	e000      	b.n	8001822 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001820:	2302      	movs	r3, #2
  }
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	00100002 	.word	0x00100002
 8001830:	ffff0000 	.word	0xffff0000

08001834 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af02      	add	r7, sp, #8
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	461a      	mov	r2, r3
 8001840:	460b      	mov	r3, r1
 8001842:	817b      	strh	r3, [r7, #10]
 8001844:	4613      	mov	r3, r2
 8001846:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001848:	f7ff fade 	bl	8000e08 <HAL_GetTick>
 800184c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b20      	cmp	r3, #32
 8001858:	f040 820b 	bne.w	8001c72 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2319      	movs	r3, #25
 8001862:	2201      	movs	r2, #1
 8001864:	497c      	ldr	r1, [pc, #496]	; (8001a58 <HAL_I2C_Master_Receive+0x224>)
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fb5a 	bl	8001f20 <I2C_WaitOnFlagUntilTimeout>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001872:	2302      	movs	r3, #2
 8001874:	e1fe      	b.n	8001c74 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_I2C_Master_Receive+0x50>
 8001880:	2302      	movs	r3, #2
 8001882:	e1f7      	b.n	8001c74 <HAL_I2C_Master_Receive+0x440>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b01      	cmp	r3, #1
 8001898:	d007      	beq.n	80018aa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0201 	orr.w	r2, r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2222      	movs	r2, #34	; 0x22
 80018be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2210      	movs	r2, #16
 80018c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	893a      	ldrh	r2, [r7, #8]
 80018da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4a5c      	ldr	r2, [pc, #368]	; (8001a5c <HAL_I2C_Master_Receive+0x228>)
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018ec:	8979      	ldrh	r1, [r7, #10]
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 fa46 	bl	8001d84 <I2C_MasterRequestRead>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e1b8      	b.n	8001c74 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001906:	2b00      	cmp	r3, #0
 8001908:	d113      	bne.n	8001932 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	623b      	str	r3, [r7, #32]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	623b      	str	r3, [r7, #32]
 800191e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e18c      	b.n	8001c4c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	2b01      	cmp	r3, #1
 8001938:	d11b      	bne.n	8001972 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001948:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e16c      	b.n	8001c4c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001976:	2b02      	cmp	r3, #2
 8001978:	d11b      	bne.n	80019b2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001988:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001998:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	e14c      	b.n	8001c4c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80019d8:	e138      	b.n	8001c4c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019de:	2b03      	cmp	r3, #3
 80019e0:	f200 80f1 	bhi.w	8001bc6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d123      	bne.n	8001a34 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 fbed 	bl	80021d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e139      	b.n	8001c74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a32:	e10b      	b.n	8001c4c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d14e      	bne.n	8001ada <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a42:	2200      	movs	r2, #0
 8001a44:	4906      	ldr	r1, [pc, #24]	; (8001a60 <HAL_I2C_Master_Receive+0x22c>)
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 fa6a 	bl	8001f20 <I2C_WaitOnFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e10e      	b.n	8001c74 <HAL_I2C_Master_Receive+0x440>
 8001a56:	bf00      	nop
 8001a58:	00100002 	.word	0x00100002
 8001a5c:	ffff0000 	.word	0xffff0000
 8001a60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ad8:	e0b8      	b.n	8001c4c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4966      	ldr	r1, [pc, #408]	; (8001c7c <HAL_I2C_Master_Receive+0x448>)
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 fa1b 	bl	8001f20 <I2C_WaitOnFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0bf      	b.n	8001c74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	494f      	ldr	r1, [pc, #316]	; (8001c7c <HAL_I2C_Master_Receive+0x448>)
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f9ed 	bl	8001f20 <I2C_WaitOnFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e091      	b.n	8001c74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bc4:	e042      	b.n	8001c4c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 fb00 	bl	80021d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e04c      	b.n	8001c74 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d118      	bne.n	8001c4c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f47f aec2 	bne.w	80019da <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c72:	2302      	movs	r3, #2
  }
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	00010004 	.word	0x00010004

08001c80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d006      	beq.n	8001caa <I2C_MasterRequestWrite+0x2a>
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d003      	beq.n	8001caa <I2C_MasterRequestWrite+0x2a>
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ca8:	d108      	bne.n	8001cbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	e00b      	b.n	8001cd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	2b12      	cmp	r3, #18
 8001cc2:	d107      	bne.n	8001cd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 f91d 	bl	8001f20 <I2C_WaitOnFlagUntilTimeout>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00d      	beq.n	8001d08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfa:	d103      	bne.n	8001d04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e035      	b.n	8001d74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d10:	d108      	bne.n	8001d24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d12:	897b      	ldrh	r3, [r7, #10]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d20:	611a      	str	r2, [r3, #16]
 8001d22:	e01b      	b.n	8001d5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d24:	897b      	ldrh	r3, [r7, #10]
 8001d26:	11db      	asrs	r3, r3, #7
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f003 0306 	and.w	r3, r3, #6
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f063 030f 	orn	r3, r3, #15
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <I2C_MasterRequestWrite+0xfc>)
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f943 	bl	8001fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e010      	b.n	8001d74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4907      	ldr	r1, [pc, #28]	; (8001d80 <I2C_MasterRequestWrite+0x100>)
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 f933 	bl	8001fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	00010008 	.word	0x00010008
 8001d80:	00010002 	.word	0x00010002

08001d84 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	460b      	mov	r3, r1
 8001d92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001da8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d006      	beq.n	8001dbe <I2C_MasterRequestRead+0x3a>
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d003      	beq.n	8001dbe <I2C_MasterRequestRead+0x3a>
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dbc:	d108      	bne.n	8001dd0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e00b      	b.n	8001de8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	2b11      	cmp	r3, #17
 8001dd6:	d107      	bne.n	8001de8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f893 	bl	8001f20 <I2C_WaitOnFlagUntilTimeout>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00d      	beq.n	8001e1c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e0e:	d103      	bne.n	8001e18 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e079      	b.n	8001f10 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e24:	d108      	bne.n	8001e38 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e26:	897b      	ldrh	r3, [r7, #10]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	611a      	str	r2, [r3, #16]
 8001e36:	e05f      	b.n	8001ef8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e38:	897b      	ldrh	r3, [r7, #10]
 8001e3a:	11db      	asrs	r3, r3, #7
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f003 0306 	and.w	r3, r3, #6
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f063 030f 	orn	r3, r3, #15
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4930      	ldr	r1, [pc, #192]	; (8001f18 <I2C_MasterRequestRead+0x194>)
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f8b9 	bl	8001fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e054      	b.n	8001f10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e66:	897b      	ldrh	r3, [r7, #10]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4929      	ldr	r1, [pc, #164]	; (8001f1c <I2C_MasterRequestRead+0x198>)
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f8a9 	bl	8001fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e044      	b.n	8001f10 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eaa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 f831 	bl	8001f20 <I2C_WaitOnFlagUntilTimeout>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00d      	beq.n	8001ee0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed2:	d103      	bne.n	8001edc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e017      	b.n	8001f10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ee0:	897b      	ldrh	r3, [r7, #10]
 8001ee2:	11db      	asrs	r3, r3, #7
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f003 0306 	and.w	r3, r3, #6
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f063 030e 	orn	r3, r3, #14
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <I2C_MasterRequestRead+0x198>)
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f865 	bl	8001fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	00010008 	.word	0x00010008
 8001f1c:	00010002 	.word	0x00010002

08001f20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f30:	e025      	b.n	8001f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f38:	d021      	beq.n	8001f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3a:	f7fe ff65 	bl	8000e08 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d302      	bcc.n	8001f50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d116      	bne.n	8001f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f043 0220 	orr.w	r2, r3, #32
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e023      	b.n	8001fc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10d      	bne.n	8001fa4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4013      	ands	r3, r2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bf0c      	ite	eq
 8001f9a:	2301      	moveq	r3, #1
 8001f9c:	2300      	movne	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	e00c      	b.n	8001fbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bf0c      	ite	eq
 8001fb6:	2301      	moveq	r3, #1
 8001fb8:	2300      	movne	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d0b6      	beq.n	8001f32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fdc:	e051      	b.n	8002082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fec:	d123      	bne.n	8002036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002006:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f043 0204 	orr.w	r2, r3, #4
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e046      	b.n	80020c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800203c:	d021      	beq.n	8002082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203e:	f7fe fee3 	bl	8000e08 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	d302      	bcc.n	8002054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d116      	bne.n	8002082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f043 0220 	orr.w	r2, r3, #32
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e020      	b.n	80020c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d10c      	bne.n	80020a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4013      	ands	r3, r2
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf14      	ite	ne
 800209e:	2301      	movne	r3, #1
 80020a0:	2300      	moveq	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	e00b      	b.n	80020be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	43da      	mvns	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	4013      	ands	r3, r2
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d18d      	bne.n	8001fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020d8:	e02d      	b.n	8002136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f8ce 	bl	800227c <I2C_IsAcknowledgeFailed>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e02d      	b.n	8002146 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f0:	d021      	beq.n	8002136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f2:	f7fe fe89 	bl	8000e08 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d302      	bcc.n	8002108 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d116      	bne.n	8002136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f043 0220 	orr.w	r2, r3, #32
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e007      	b.n	8002146 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002140:	2b80      	cmp	r3, #128	; 0x80
 8002142:	d1ca      	bne.n	80020da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800215a:	e02d      	b.n	80021b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f88d 	bl	800227c <I2C_IsAcknowledgeFailed>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e02d      	b.n	80021c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002172:	d021      	beq.n	80021b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002174:	f7fe fe48 	bl	8000e08 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	429a      	cmp	r2, r3
 8002182:	d302      	bcc.n	800218a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d116      	bne.n	80021b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0220 	orr.w	r2, r3, #32
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e007      	b.n	80021c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d1ca      	bne.n	800215c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021dc:	e042      	b.n	8002264 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b10      	cmp	r3, #16
 80021ea:	d119      	bne.n	8002220 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0210 	mvn.w	r2, #16
 80021f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e029      	b.n	8002274 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002220:	f7fe fdf2 	bl	8000e08 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	429a      	cmp	r2, r3
 800222e:	d302      	bcc.n	8002236 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d116      	bne.n	8002264 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	f043 0220 	orr.w	r2, r3, #32
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e007      	b.n	8002274 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226e:	2b40      	cmp	r3, #64	; 0x40
 8002270:	d1b5      	bne.n	80021de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002292:	d11b      	bne.n	80022cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800229c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f043 0204 	orr.w	r2, r3, #4
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e267      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d075      	beq.n	80023e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022fa:	4b88      	ldr	r3, [pc, #544]	; (800251c <HAL_RCC_OscConfig+0x240>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b04      	cmp	r3, #4
 8002304:	d00c      	beq.n	8002320 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002306:	4b85      	ldr	r3, [pc, #532]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800230e:	2b08      	cmp	r3, #8
 8002310:	d112      	bne.n	8002338 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002312:	4b82      	ldr	r3, [pc, #520]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800231e:	d10b      	bne.n	8002338 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002320:	4b7e      	ldr	r3, [pc, #504]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d05b      	beq.n	80023e4 <HAL_RCC_OscConfig+0x108>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d157      	bne.n	80023e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e242      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002340:	d106      	bne.n	8002350 <HAL_RCC_OscConfig+0x74>
 8002342:	4b76      	ldr	r3, [pc, #472]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a75      	ldr	r2, [pc, #468]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e01d      	b.n	800238c <HAL_RCC_OscConfig+0xb0>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x98>
 800235a:	4b70      	ldr	r3, [pc, #448]	; (800251c <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a6f      	ldr	r2, [pc, #444]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	4b6d      	ldr	r3, [pc, #436]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a6c      	ldr	r2, [pc, #432]	; (800251c <HAL_RCC_OscConfig+0x240>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e00b      	b.n	800238c <HAL_RCC_OscConfig+0xb0>
 8002374:	4b69      	ldr	r3, [pc, #420]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a68      	ldr	r2, [pc, #416]	; (800251c <HAL_RCC_OscConfig+0x240>)
 800237a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b66      	ldr	r3, [pc, #408]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a65      	ldr	r2, [pc, #404]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d013      	beq.n	80023bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe fd38 	bl	8000e08 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800239c:	f7fe fd34 	bl	8000e08 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	; 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e207      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	4b5b      	ldr	r3, [pc, #364]	; (800251c <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0xc0>
 80023ba:	e014      	b.n	80023e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7fe fd24 	bl	8000e08 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c4:	f7fe fd20 	bl	8000e08 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e1f3      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d6:	4b51      	ldr	r3, [pc, #324]	; (800251c <HAL_RCC_OscConfig+0x240>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0xe8>
 80023e2:	e000      	b.n	80023e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d063      	beq.n	80024ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023f2:	4b4a      	ldr	r3, [pc, #296]	; (800251c <HAL_RCC_OscConfig+0x240>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002406:	2b08      	cmp	r3, #8
 8002408:	d11c      	bne.n	8002444 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240a:	4b44      	ldr	r3, [pc, #272]	; (800251c <HAL_RCC_OscConfig+0x240>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d116      	bne.n	8002444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_RCC_OscConfig+0x152>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d001      	beq.n	800242e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e1c7      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4937      	ldr	r1, [pc, #220]	; (800251c <HAL_RCC_OscConfig+0x240>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002442:	e03a      	b.n	80024ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d020      	beq.n	800248e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800244c:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_RCC_OscConfig+0x244>)
 800244e:	2201      	movs	r2, #1
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7fe fcd9 	bl	8000e08 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245a:	f7fe fcd5 	bl	8000e08 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e1a8      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246c:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_RCC_OscConfig+0x240>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002478:	4b28      	ldr	r3, [pc, #160]	; (800251c <HAL_RCC_OscConfig+0x240>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4925      	ldr	r1, [pc, #148]	; (800251c <HAL_RCC_OscConfig+0x240>)
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]
 800248c:	e015      	b.n	80024ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCC_OscConfig+0x244>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fcb8 	bl	8000e08 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800249c:	f7fe fcb4 	bl	8000e08 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e187      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ae:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d036      	beq.n	8002534 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d016      	beq.n	80024fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_RCC_OscConfig+0x248>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d4:	f7fe fc98 	bl	8000e08 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024dc:	f7fe fc94 	bl	8000e08 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e167      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_OscConfig+0x240>)
 80024f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x200>
 80024fa:	e01b      	b.n	8002534 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_OscConfig+0x248>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002502:	f7fe fc81 	bl	8000e08 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002508:	e00e      	b.n	8002528 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250a:	f7fe fc7d 	bl	8000e08 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d907      	bls.n	8002528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e150      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
 800251c:	40023800 	.word	0x40023800
 8002520:	42470000 	.word	0x42470000
 8002524:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_RCC_OscConfig+0x470>)
 800252a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1ea      	bne.n	800250a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8097 	beq.w	8002670 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002546:	4b81      	ldr	r3, [pc, #516]	; (800274c <HAL_RCC_OscConfig+0x470>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	4b7d      	ldr	r3, [pc, #500]	; (800274c <HAL_RCC_OscConfig+0x470>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a7c      	ldr	r2, [pc, #496]	; (800274c <HAL_RCC_OscConfig+0x470>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b7a      	ldr	r3, [pc, #488]	; (800274c <HAL_RCC_OscConfig+0x470>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b77      	ldr	r3, [pc, #476]	; (8002750 <HAL_RCC_OscConfig+0x474>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d118      	bne.n	80025b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257e:	4b74      	ldr	r3, [pc, #464]	; (8002750 <HAL_RCC_OscConfig+0x474>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a73      	ldr	r2, [pc, #460]	; (8002750 <HAL_RCC_OscConfig+0x474>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7fe fc3d 	bl	8000e08 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002592:	f7fe fc39 	bl	8000e08 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e10c      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	4b6a      	ldr	r3, [pc, #424]	; (8002750 <HAL_RCC_OscConfig+0x474>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2ea>
 80025b8:	4b64      	ldr	r3, [pc, #400]	; (800274c <HAL_RCC_OscConfig+0x470>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	4a63      	ldr	r2, [pc, #396]	; (800274c <HAL_RCC_OscConfig+0x470>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6713      	str	r3, [r2, #112]	; 0x70
 80025c4:	e01c      	b.n	8002600 <HAL_RCC_OscConfig+0x324>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x30c>
 80025ce:	4b5f      	ldr	r3, [pc, #380]	; (800274c <HAL_RCC_OscConfig+0x470>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	4a5e      	ldr	r2, [pc, #376]	; (800274c <HAL_RCC_OscConfig+0x470>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	6713      	str	r3, [r2, #112]	; 0x70
 80025da:	4b5c      	ldr	r3, [pc, #368]	; (800274c <HAL_RCC_OscConfig+0x470>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	4a5b      	ldr	r2, [pc, #364]	; (800274c <HAL_RCC_OscConfig+0x470>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6713      	str	r3, [r2, #112]	; 0x70
 80025e6:	e00b      	b.n	8002600 <HAL_RCC_OscConfig+0x324>
 80025e8:	4b58      	ldr	r3, [pc, #352]	; (800274c <HAL_RCC_OscConfig+0x470>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	4a57      	ldr	r2, [pc, #348]	; (800274c <HAL_RCC_OscConfig+0x470>)
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	6713      	str	r3, [r2, #112]	; 0x70
 80025f4:	4b55      	ldr	r3, [pc, #340]	; (800274c <HAL_RCC_OscConfig+0x470>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	4a54      	ldr	r2, [pc, #336]	; (800274c <HAL_RCC_OscConfig+0x470>)
 80025fa:	f023 0304 	bic.w	r3, r3, #4
 80025fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d015      	beq.n	8002634 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7fe fbfe 	bl	8000e08 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260e:	e00a      	b.n	8002626 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002610:	f7fe fbfa 	bl	8000e08 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e0cb      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	4b49      	ldr	r3, [pc, #292]	; (800274c <HAL_RCC_OscConfig+0x470>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0ee      	beq.n	8002610 <HAL_RCC_OscConfig+0x334>
 8002632:	e014      	b.n	800265e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002634:	f7fe fbe8 	bl	8000e08 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263a:	e00a      	b.n	8002652 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800263c:	f7fe fbe4 	bl	8000e08 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e0b5      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002652:	4b3e      	ldr	r3, [pc, #248]	; (800274c <HAL_RCC_OscConfig+0x470>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1ee      	bne.n	800263c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d105      	bne.n	8002670 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002664:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_RCC_OscConfig+0x470>)
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	4a38      	ldr	r2, [pc, #224]	; (800274c <HAL_RCC_OscConfig+0x470>)
 800266a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800266e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80a1 	beq.w	80027bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800267a:	4b34      	ldr	r3, [pc, #208]	; (800274c <HAL_RCC_OscConfig+0x470>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b08      	cmp	r3, #8
 8002684:	d05c      	beq.n	8002740 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d141      	bne.n	8002712 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4b31      	ldr	r3, [pc, #196]	; (8002754 <HAL_RCC_OscConfig+0x478>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7fe fbb8 	bl	8000e08 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269c:	f7fe fbb4 	bl	8000e08 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e087      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_RCC_OscConfig+0x470>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69da      	ldr	r2, [r3, #28]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	019b      	lsls	r3, r3, #6
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	085b      	lsrs	r3, r3, #1
 80026d2:	3b01      	subs	r3, #1
 80026d4:	041b      	lsls	r3, r3, #16
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	491b      	ldr	r1, [pc, #108]	; (800274c <HAL_RCC_OscConfig+0x470>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_RCC_OscConfig+0x478>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7fe fb8d 	bl	8000e08 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f2:	f7fe fb89 	bl	8000e08 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e05c      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_RCC_OscConfig+0x470>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x416>
 8002710:	e054      	b.n	80027bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <HAL_RCC_OscConfig+0x478>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7fe fb76 	bl	8000e08 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fb72 	bl	8000e08 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e045      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCC_OscConfig+0x470>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x444>
 800273e:	e03d      	b.n	80027bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d107      	bne.n	8002758 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e038      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
 800274c:	40023800 	.word	0x40023800
 8002750:	40007000 	.word	0x40007000
 8002754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_RCC_OscConfig+0x4ec>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d028      	beq.n	80027b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d121      	bne.n	80027b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d11a      	bne.n	80027b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002788:	4013      	ands	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800278e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002790:	4293      	cmp	r3, r2
 8002792:	d111      	bne.n	80027b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	3b01      	subs	r3, #1
 80027a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d107      	bne.n	80027b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800

080027cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0cc      	b.n	800297a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e0:	4b68      	ldr	r3, [pc, #416]	; (8002984 <HAL_RCC_ClockConfig+0x1b8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d90c      	bls.n	8002808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b65      	ldr	r3, [pc, #404]	; (8002984 <HAL_RCC_ClockConfig+0x1b8>)
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f6:	4b63      	ldr	r3, [pc, #396]	; (8002984 <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0b8      	b.n	800297a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d020      	beq.n	8002856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002820:	4b59      	ldr	r3, [pc, #356]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	4a58      	ldr	r2, [pc, #352]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800282a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002838:	4b53      	ldr	r3, [pc, #332]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a52      	ldr	r2, [pc, #328]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002844:	4b50      	ldr	r3, [pc, #320]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	494d      	ldr	r1, [pc, #308]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d044      	beq.n	80028ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286a:	4b47      	ldr	r3, [pc, #284]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d119      	bne.n	80028aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e07f      	b.n	800297a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d003      	beq.n	800288a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002886:	2b03      	cmp	r3, #3
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288a:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e06f      	b.n	800297a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289a:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e067      	b.n	800297a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028aa:	4b37      	ldr	r3, [pc, #220]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f023 0203 	bic.w	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4934      	ldr	r1, [pc, #208]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028bc:	f7fe faa4 	bl	8000e08 <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c2:	e00a      	b.n	80028da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c4:	f7fe faa0 	bl	8000e08 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e04f      	b.n	800297a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 020c 	and.w	r2, r3, #12
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d1eb      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ec:	4b25      	ldr	r3, [pc, #148]	; (8002984 <HAL_RCC_ClockConfig+0x1b8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d20c      	bcs.n	8002914 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b22      	ldr	r3, [pc, #136]	; (8002984 <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b20      	ldr	r3, [pc, #128]	; (8002984 <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e032      	b.n	800297a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002920:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	4916      	ldr	r1, [pc, #88]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	490e      	ldr	r1, [pc, #56]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002952:	f000 f821 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8002956:	4602      	mov	r2, r0
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	490a      	ldr	r1, [pc, #40]	; (800298c <HAL_RCC_ClockConfig+0x1c0>)
 8002964:	5ccb      	ldrb	r3, [r1, r3]
 8002966:	fa22 f303 	lsr.w	r3, r2, r3
 800296a:	4a09      	ldr	r2, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x1c8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe f92a 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023c00 	.word	0x40023c00
 8002988:	40023800 	.word	0x40023800
 800298c:	080062ec 	.word	0x080062ec
 8002990:	2000000c 	.word	0x2000000c
 8002994:	20000010 	.word	0x20000010

08002998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800299c:	b090      	sub	sp, #64	; 0x40
 800299e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
 80029a4:	2300      	movs	r3, #0
 80029a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a8:	2300      	movs	r3, #0
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b0:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d00d      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x40>
 80029bc:	2b08      	cmp	r3, #8
 80029be:	f200 80a1 	bhi.w	8002b04 <HAL_RCC_GetSysClockFreq+0x16c>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x34>
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ca:	e09b      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029cc:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x184>)
 80029ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80029d0:	e09b      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029d2:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x188>)
 80029d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029d6:	e098      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d8:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029e2:	4b4d      	ldr	r3, [pc, #308]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d028      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ee:	4b4a      	ldr	r3, [pc, #296]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	099b      	lsrs	r3, r3, #6
 80029f4:	2200      	movs	r2, #0
 80029f6:	623b      	str	r3, [r7, #32]
 80029f8:	627a      	str	r2, [r7, #36]	; 0x24
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a00:	2100      	movs	r1, #0
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a04:	fb03 f201 	mul.w	r2, r3, r1
 8002a08:	2300      	movs	r3, #0
 8002a0a:	fb00 f303 	mul.w	r3, r0, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	4a43      	ldr	r2, [pc, #268]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a12:	fba0 1202 	umull	r1, r2, r0, r2
 8002a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a18:	460a      	mov	r2, r1
 8002a1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1e:	4413      	add	r3, r2
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a24:	2200      	movs	r2, #0
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	61fa      	str	r2, [r7, #28]
 8002a2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a32:	f7fd fbd5 	bl	80001e0 <__aeabi_uldivmod>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a3e:	e053      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a40:	4b35      	ldr	r3, [pc, #212]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	2200      	movs	r2, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	617a      	str	r2, [r7, #20]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a52:	f04f 0b00 	mov.w	fp, #0
 8002a56:	4652      	mov	r2, sl
 8002a58:	465b      	mov	r3, fp
 8002a5a:	f04f 0000 	mov.w	r0, #0
 8002a5e:	f04f 0100 	mov.w	r1, #0
 8002a62:	0159      	lsls	r1, r3, #5
 8002a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a68:	0150      	lsls	r0, r2, #5
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	ebb2 080a 	subs.w	r8, r2, sl
 8002a72:	eb63 090b 	sbc.w	r9, r3, fp
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a8a:	ebb2 0408 	subs.w	r4, r2, r8
 8002a8e:	eb63 0509 	sbc.w	r5, r3, r9
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	00eb      	lsls	r3, r5, #3
 8002a9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aa0:	00e2      	lsls	r2, r4, #3
 8002aa2:	4614      	mov	r4, r2
 8002aa4:	461d      	mov	r5, r3
 8002aa6:	eb14 030a 	adds.w	r3, r4, sl
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	eb45 030b 	adc.w	r3, r5, fp
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002abe:	4629      	mov	r1, r5
 8002ac0:	028b      	lsls	r3, r1, #10
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac8:	4621      	mov	r1, r4
 8002aca:	028a      	lsls	r2, r1, #10
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	60fa      	str	r2, [r7, #12]
 8002ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002adc:	f7fd fb80 	bl	80001e0 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	3301      	adds	r3, #1
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002af8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3740      	adds	r7, #64	; 0x40
 8002b10:	46bd      	mov	sp, r7
 8002b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	00f42400 	.word	0x00f42400
 8002b20:	017d7840 	.word	0x017d7840

08002b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	2000000c 	.word	0x2000000c

08002b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b40:	f7ff fff0 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	0a9b      	lsrs	r3, r3, #10
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4903      	ldr	r1, [pc, #12]	; (8002b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	080062fc 	.word	0x080062fc

08002b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b68:	f7ff ffdc 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	0b5b      	lsrs	r3, r3, #13
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4903      	ldr	r1, [pc, #12]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7a:	5ccb      	ldrb	r3, [r1, r3]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	080062fc 	.word	0x080062fc

08002b8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	220f      	movs	r2, #15
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b9c:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0203 	and.w	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	08db      	lsrs	r3, r3, #3
 8002bc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bce:	4b07      	ldr	r3, [pc, #28]	; (8002bec <HAL_RCC_GetClockConfig+0x60>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0207 	and.w	r2, r3, #7
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	601a      	str	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40023c00 	.word	0x40023c00

08002bf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e07b      	b.n	8002cfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d108      	bne.n	8002c1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c12:	d009      	beq.n	8002c28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	61da      	str	r2, [r3, #28]
 8002c1a:	e005      	b.n	8002c28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fd ff10 	bl	8000a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	ea42 0103 	orr.w	r1, r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	f003 0104 	and.w	r1, r3, #4
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	f003 0210 	and.w	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69da      	ldr	r2, [r3, #28]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e041      	b.n	8002d98 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d106      	bne.n	8002d2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7fd fee5 	bl	8000af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4610      	mov	r0, r2
 8002d42:	f000 fae1 	bl	8003308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d001      	beq.n	8002db8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e03c      	b.n	8002e32 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1e      	ldr	r2, [pc, #120]	; (8002e40 <HAL_TIM_Base_Start+0xa0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d018      	beq.n	8002dfc <HAL_TIM_Base_Start+0x5c>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd2:	d013      	beq.n	8002dfc <HAL_TIM_Base_Start+0x5c>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1a      	ldr	r2, [pc, #104]	; (8002e44 <HAL_TIM_Base_Start+0xa4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00e      	beq.n	8002dfc <HAL_TIM_Base_Start+0x5c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <HAL_TIM_Base_Start+0xa8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d009      	beq.n	8002dfc <HAL_TIM_Base_Start+0x5c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a17      	ldr	r2, [pc, #92]	; (8002e4c <HAL_TIM_Base_Start+0xac>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_TIM_Base_Start+0x5c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a16      	ldr	r2, [pc, #88]	; (8002e50 <HAL_TIM_Base_Start+0xb0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d111      	bne.n	8002e20 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d010      	beq.n	8002e30 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1e:	e007      	b.n	8002e30 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40010000 	.word	0x40010000
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40000800 	.word	0x40000800
 8002e4c:	40000c00 	.word	0x40000c00
 8002e50:	40014000 	.word	0x40014000

08002e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d001      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e044      	b.n	8002ef6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1e      	ldr	r2, [pc, #120]	; (8002f04 <HAL_TIM_Base_Start_IT+0xb0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d018      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e96:	d013      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00e      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a19      	ldr	r2, [pc, #100]	; (8002f0c <HAL_TIM_Base_Start_IT+0xb8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a17      	ldr	r2, [pc, #92]	; (8002f10 <HAL_TIM_Base_Start_IT+0xbc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d004      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a16      	ldr	r2, [pc, #88]	; (8002f14 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d111      	bne.n	8002ee4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d010      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee2:	e007      	b.n	8002ef4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800
 8002f10:	40000c00 	.word	0x40000c00
 8002f14:	40014000 	.word	0x40014000

08002f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d122      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d11b      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0202 	mvn.w	r2, #2
 8002f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f9b5 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f9a7 	bl	80032b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f9b8 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d122      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0204 	mvn.w	r2, #4
 8002f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f98b 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f97d 	bl	80032b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f98e 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d122      	bne.n	800301c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d11b      	bne.n	800301c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0208 	mvn.w	r2, #8
 8002fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f961 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f953 	bl	80032b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f964 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b10      	cmp	r3, #16
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b10      	cmp	r3, #16
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0210 	mvn.w	r2, #16
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2208      	movs	r2, #8
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f937 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f929 	bl	80032b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f93a 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d10e      	bne.n	800309c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d107      	bne.n	800309c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0201 	mvn.w	r2, #1
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd fc58 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b80      	cmp	r3, #128	; 0x80
 80030a8:	d10e      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b80      	cmp	r3, #128	; 0x80
 80030b6:	d107      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fab2 	bl	800362c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d10e      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e0:	2b40      	cmp	r3, #64	; 0x40
 80030e2:	d107      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8ff 	bl	80032f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d10e      	bne.n	8003120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b20      	cmp	r3, #32
 800310e:	d107      	bne.n	8003120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0220 	mvn.w	r2, #32
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa7c 	bl	8003618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_TIM_ConfigClockSource+0x1c>
 8003140:	2302      	movs	r3, #2
 8003142:	e0b4      	b.n	80032ae <HAL_TIM_ConfigClockSource+0x186>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800316a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317c:	d03e      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0xd4>
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003182:	f200 8087 	bhi.w	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 8003186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318a:	f000 8086 	beq.w	800329a <HAL_TIM_ConfigClockSource+0x172>
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003192:	d87f      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 8003194:	2b70      	cmp	r3, #112	; 0x70
 8003196:	d01a      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0xa6>
 8003198:	2b70      	cmp	r3, #112	; 0x70
 800319a:	d87b      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b60      	cmp	r3, #96	; 0x60
 800319e:	d050      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x11a>
 80031a0:	2b60      	cmp	r3, #96	; 0x60
 80031a2:	d877      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031a4:	2b50      	cmp	r3, #80	; 0x50
 80031a6:	d03c      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0xfa>
 80031a8:	2b50      	cmp	r3, #80	; 0x50
 80031aa:	d873      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d058      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x13a>
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d86f      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b30      	cmp	r3, #48	; 0x30
 80031b6:	d064      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x15a>
 80031b8:	2b30      	cmp	r3, #48	; 0x30
 80031ba:	d86b      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d060      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x15a>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d867      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d05c      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x15a>
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d05a      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x15a>
 80031cc:	e062      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6899      	ldr	r1, [r3, #8]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f000 f98d 	bl	80034fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	609a      	str	r2, [r3, #8]
      break;
 80031fa:	e04f      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6899      	ldr	r1, [r3, #8]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f000 f976 	bl	80034fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800321e:	609a      	str	r2, [r3, #8]
      break;
 8003220:	e03c      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6859      	ldr	r1, [r3, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	461a      	mov	r2, r3
 8003230:	f000 f8ea 	bl	8003408 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2150      	movs	r1, #80	; 0x50
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f943 	bl	80034c6 <TIM_ITRx_SetConfig>
      break;
 8003240:	e02c      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	461a      	mov	r2, r3
 8003250:	f000 f909 	bl	8003466 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2160      	movs	r1, #96	; 0x60
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f933 	bl	80034c6 <TIM_ITRx_SetConfig>
      break;
 8003260:	e01c      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	461a      	mov	r2, r3
 8003270:	f000 f8ca 	bl	8003408 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2140      	movs	r1, #64	; 0x40
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f923 	bl	80034c6 <TIM_ITRx_SetConfig>
      break;
 8003280:	e00c      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4619      	mov	r1, r3
 800328c:	4610      	mov	r0, r2
 800328e:	f000 f91a 	bl	80034c6 <TIM_ITRx_SetConfig>
      break;
 8003292:	e003      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      break;
 8003298:	e000      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800329a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a34      	ldr	r2, [pc, #208]	; (80033ec <TIM_Base_SetConfig+0xe4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00f      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003326:	d00b      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a31      	ldr	r2, [pc, #196]	; (80033f0 <TIM_Base_SetConfig+0xe8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a30      	ldr	r2, [pc, #192]	; (80033f4 <TIM_Base_SetConfig+0xec>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a2f      	ldr	r2, [pc, #188]	; (80033f8 <TIM_Base_SetConfig+0xf0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d108      	bne.n	8003352 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a25      	ldr	r2, [pc, #148]	; (80033ec <TIM_Base_SetConfig+0xe4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01b      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003360:	d017      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a22      	ldr	r2, [pc, #136]	; (80033f0 <TIM_Base_SetConfig+0xe8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a21      	ldr	r2, [pc, #132]	; (80033f4 <TIM_Base_SetConfig+0xec>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00f      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a20      	ldr	r2, [pc, #128]	; (80033f8 <TIM_Base_SetConfig+0xf0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <TIM_Base_SetConfig+0xf4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a1e      	ldr	r2, [pc, #120]	; (8003400 <TIM_Base_SetConfig+0xf8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <TIM_Base_SetConfig+0xfc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d108      	bne.n	80033a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a08      	ldr	r2, [pc, #32]	; (80033ec <TIM_Base_SetConfig+0xe4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d103      	bne.n	80033d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	615a      	str	r2, [r3, #20]
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40000400 	.word	0x40000400
 80033f4:	40000800 	.word	0x40000800
 80033f8:	40000c00 	.word	0x40000c00
 80033fc:	40014000 	.word	0x40014000
 8003400:	40014400 	.word	0x40014400
 8003404:	40014800 	.word	0x40014800

08003408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f023 0201 	bic.w	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f023 030a 	bic.w	r3, r3, #10
 8003444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003466:	b480      	push	{r7}
 8003468:	b087      	sub	sp, #28
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f023 0210 	bic.w	r2, r3, #16
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	031b      	lsls	r3, r3, #12
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	621a      	str	r2, [r3, #32]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b085      	sub	sp, #20
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f043 0307 	orr.w	r3, r3, #7
 80034e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	609a      	str	r2, [r3, #8]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	021a      	lsls	r2, r3, #8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	431a      	orrs	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4313      	orrs	r3, r2
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	609a      	str	r2, [r3, #8]
}
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003550:	2302      	movs	r3, #2
 8003552:	e050      	b.n	80035f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d018      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a0:	d013      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00e      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a16      	ldr	r2, [pc, #88]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a15      	ldr	r2, [pc, #84]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a13      	ldr	r2, [pc, #76]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10c      	bne.n	80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40010000 	.word	0x40010000
 8003608:	40000400 	.word	0x40000400
 800360c:	40000800 	.word	0x40000800
 8003610:	40000c00 	.word	0x40000c00
 8003614:	40014000 	.word	0x40014000

08003618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e03f      	b.n	80036d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fa68 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	; 0x24
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f829 	bl	80036dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e0:	b0c0      	sub	sp, #256	; 0x100
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	68d9      	ldr	r1, [r3, #12]
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	ea40 0301 	orr.w	r3, r0, r1
 8003704:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	431a      	orrs	r2, r3
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	431a      	orrs	r2, r3
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003734:	f021 010c 	bic.w	r1, r1, #12
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003742:	430b      	orrs	r3, r1
 8003744:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003756:	6999      	ldr	r1, [r3, #24]
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	ea40 0301 	orr.w	r3, r0, r1
 8003762:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b8f      	ldr	r3, [pc, #572]	; (80039a8 <UART_SetConfig+0x2cc>)
 800376c:	429a      	cmp	r2, r3
 800376e:	d005      	beq.n	800377c <UART_SetConfig+0xa0>
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4b8d      	ldr	r3, [pc, #564]	; (80039ac <UART_SetConfig+0x2d0>)
 8003778:	429a      	cmp	r2, r3
 800377a:	d104      	bne.n	8003786 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800377c:	f7ff f9f2 	bl	8002b64 <HAL_RCC_GetPCLK2Freq>
 8003780:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003784:	e003      	b.n	800378e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003786:	f7ff f9d9 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 800378a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800378e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003798:	f040 810c 	bne.w	80039b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800379c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a0:	2200      	movs	r2, #0
 80037a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037ae:	4622      	mov	r2, r4
 80037b0:	462b      	mov	r3, r5
 80037b2:	1891      	adds	r1, r2, r2
 80037b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80037b6:	415b      	adcs	r3, r3
 80037b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037be:	4621      	mov	r1, r4
 80037c0:	eb12 0801 	adds.w	r8, r2, r1
 80037c4:	4629      	mov	r1, r5
 80037c6:	eb43 0901 	adc.w	r9, r3, r1
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037de:	4690      	mov	r8, r2
 80037e0:	4699      	mov	r9, r3
 80037e2:	4623      	mov	r3, r4
 80037e4:	eb18 0303 	adds.w	r3, r8, r3
 80037e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037ec:	462b      	mov	r3, r5
 80037ee:	eb49 0303 	adc.w	r3, r9, r3
 80037f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003802:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003806:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800380a:	460b      	mov	r3, r1
 800380c:	18db      	adds	r3, r3, r3
 800380e:	653b      	str	r3, [r7, #80]	; 0x50
 8003810:	4613      	mov	r3, r2
 8003812:	eb42 0303 	adc.w	r3, r2, r3
 8003816:	657b      	str	r3, [r7, #84]	; 0x54
 8003818:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800381c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003820:	f7fc fcde 	bl	80001e0 <__aeabi_uldivmod>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4b61      	ldr	r3, [pc, #388]	; (80039b0 <UART_SetConfig+0x2d4>)
 800382a:	fba3 2302 	umull	r2, r3, r3, r2
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	011c      	lsls	r4, r3, #4
 8003832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003836:	2200      	movs	r2, #0
 8003838:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800383c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003840:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003844:	4642      	mov	r2, r8
 8003846:	464b      	mov	r3, r9
 8003848:	1891      	adds	r1, r2, r2
 800384a:	64b9      	str	r1, [r7, #72]	; 0x48
 800384c:	415b      	adcs	r3, r3
 800384e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003850:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003854:	4641      	mov	r1, r8
 8003856:	eb12 0a01 	adds.w	sl, r2, r1
 800385a:	4649      	mov	r1, r9
 800385c:	eb43 0b01 	adc.w	fp, r3, r1
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800386c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003874:	4692      	mov	sl, r2
 8003876:	469b      	mov	fp, r3
 8003878:	4643      	mov	r3, r8
 800387a:	eb1a 0303 	adds.w	r3, sl, r3
 800387e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003882:	464b      	mov	r3, r9
 8003884:	eb4b 0303 	adc.w	r3, fp, r3
 8003888:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003898:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800389c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038a0:	460b      	mov	r3, r1
 80038a2:	18db      	adds	r3, r3, r3
 80038a4:	643b      	str	r3, [r7, #64]	; 0x40
 80038a6:	4613      	mov	r3, r2
 80038a8:	eb42 0303 	adc.w	r3, r2, r3
 80038ac:	647b      	str	r3, [r7, #68]	; 0x44
 80038ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038b6:	f7fc fc93 	bl	80001e0 <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4611      	mov	r1, r2
 80038c0:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <UART_SetConfig+0x2d4>)
 80038c2:	fba3 2301 	umull	r2, r3, r3, r1
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2264      	movs	r2, #100	; 0x64
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	1acb      	subs	r3, r1, r3
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038d6:	4b36      	ldr	r3, [pc, #216]	; (80039b0 <UART_SetConfig+0x2d4>)
 80038d8:	fba3 2302 	umull	r2, r3, r3, r2
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038e4:	441c      	add	r4, r3
 80038e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038f8:	4642      	mov	r2, r8
 80038fa:	464b      	mov	r3, r9
 80038fc:	1891      	adds	r1, r2, r2
 80038fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003900:	415b      	adcs	r3, r3
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003904:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003908:	4641      	mov	r1, r8
 800390a:	1851      	adds	r1, r2, r1
 800390c:	6339      	str	r1, [r7, #48]	; 0x30
 800390e:	4649      	mov	r1, r9
 8003910:	414b      	adcs	r3, r1
 8003912:	637b      	str	r3, [r7, #52]	; 0x34
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003920:	4659      	mov	r1, fp
 8003922:	00cb      	lsls	r3, r1, #3
 8003924:	4651      	mov	r1, sl
 8003926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800392a:	4651      	mov	r1, sl
 800392c:	00ca      	lsls	r2, r1, #3
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	4603      	mov	r3, r0
 8003934:	4642      	mov	r2, r8
 8003936:	189b      	adds	r3, r3, r2
 8003938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800393c:	464b      	mov	r3, r9
 800393e:	460a      	mov	r2, r1
 8003940:	eb42 0303 	adc.w	r3, r2, r3
 8003944:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003954:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003958:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800395c:	460b      	mov	r3, r1
 800395e:	18db      	adds	r3, r3, r3
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
 8003962:	4613      	mov	r3, r2
 8003964:	eb42 0303 	adc.w	r3, r2, r3
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800396e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003972:	f7fc fc35 	bl	80001e0 <__aeabi_uldivmod>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <UART_SetConfig+0x2d4>)
 800397c:	fba3 1302 	umull	r1, r3, r3, r2
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	2164      	movs	r1, #100	; 0x64
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	3332      	adds	r3, #50	; 0x32
 800398e:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <UART_SetConfig+0x2d4>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	f003 0207 	and.w	r2, r3, #7
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4422      	add	r2, r4
 80039a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039a4:	e105      	b.n	8003bb2 <UART_SetConfig+0x4d6>
 80039a6:	bf00      	nop
 80039a8:	40011000 	.word	0x40011000
 80039ac:	40011400 	.word	0x40011400
 80039b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039c6:	4642      	mov	r2, r8
 80039c8:	464b      	mov	r3, r9
 80039ca:	1891      	adds	r1, r2, r2
 80039cc:	6239      	str	r1, [r7, #32]
 80039ce:	415b      	adcs	r3, r3
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
 80039d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039d6:	4641      	mov	r1, r8
 80039d8:	1854      	adds	r4, r2, r1
 80039da:	4649      	mov	r1, r9
 80039dc:	eb43 0501 	adc.w	r5, r3, r1
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	00eb      	lsls	r3, r5, #3
 80039ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ee:	00e2      	lsls	r2, r4, #3
 80039f0:	4614      	mov	r4, r2
 80039f2:	461d      	mov	r5, r3
 80039f4:	4643      	mov	r3, r8
 80039f6:	18e3      	adds	r3, r4, r3
 80039f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039fc:	464b      	mov	r3, r9
 80039fe:	eb45 0303 	adc.w	r3, r5, r3
 8003a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a22:	4629      	mov	r1, r5
 8003a24:	008b      	lsls	r3, r1, #2
 8003a26:	4621      	mov	r1, r4
 8003a28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	008a      	lsls	r2, r1, #2
 8003a30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a34:	f7fc fbd4 	bl	80001e0 <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4b60      	ldr	r3, [pc, #384]	; (8003bc0 <UART_SetConfig+0x4e4>)
 8003a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	011c      	lsls	r4, r3, #4
 8003a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a58:	4642      	mov	r2, r8
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	1891      	adds	r1, r2, r2
 8003a5e:	61b9      	str	r1, [r7, #24]
 8003a60:	415b      	adcs	r3, r3
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a68:	4641      	mov	r1, r8
 8003a6a:	1851      	adds	r1, r2, r1
 8003a6c:	6139      	str	r1, [r7, #16]
 8003a6e:	4649      	mov	r1, r9
 8003a70:	414b      	adcs	r3, r1
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a80:	4659      	mov	r1, fp
 8003a82:	00cb      	lsls	r3, r1, #3
 8003a84:	4651      	mov	r1, sl
 8003a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a8a:	4651      	mov	r1, sl
 8003a8c:	00ca      	lsls	r2, r1, #3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4619      	mov	r1, r3
 8003a92:	4603      	mov	r3, r0
 8003a94:	4642      	mov	r2, r8
 8003a96:	189b      	adds	r3, r3, r2
 8003a98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	460a      	mov	r2, r1
 8003aa0:	eb42 0303 	adc.w	r3, r2, r3
 8003aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ab2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	008b      	lsls	r3, r1, #2
 8003ac4:	4641      	mov	r1, r8
 8003ac6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aca:	4641      	mov	r1, r8
 8003acc:	008a      	lsls	r2, r1, #2
 8003ace:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ad2:	f7fc fb85 	bl	80001e0 <__aeabi_uldivmod>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4b39      	ldr	r3, [pc, #228]	; (8003bc0 <UART_SetConfig+0x4e4>)
 8003adc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	2164      	movs	r1, #100	; 0x64
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	3332      	adds	r3, #50	; 0x32
 8003aee:	4a34      	ldr	r2, [pc, #208]	; (8003bc0 <UART_SetConfig+0x4e4>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003afa:	441c      	add	r4, r3
 8003afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b00:	2200      	movs	r2, #0
 8003b02:	673b      	str	r3, [r7, #112]	; 0x70
 8003b04:	677a      	str	r2, [r7, #116]	; 0x74
 8003b06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b0a:	4642      	mov	r2, r8
 8003b0c:	464b      	mov	r3, r9
 8003b0e:	1891      	adds	r1, r2, r2
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	415b      	adcs	r3, r3
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b1a:	4641      	mov	r1, r8
 8003b1c:	1851      	adds	r1, r2, r1
 8003b1e:	6039      	str	r1, [r7, #0]
 8003b20:	4649      	mov	r1, r9
 8003b22:	414b      	adcs	r3, r1
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b32:	4659      	mov	r1, fp
 8003b34:	00cb      	lsls	r3, r1, #3
 8003b36:	4651      	mov	r1, sl
 8003b38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3c:	4651      	mov	r1, sl
 8003b3e:	00ca      	lsls	r2, r1, #3
 8003b40:	4610      	mov	r0, r2
 8003b42:	4619      	mov	r1, r3
 8003b44:	4603      	mov	r3, r0
 8003b46:	4642      	mov	r2, r8
 8003b48:	189b      	adds	r3, r3, r2
 8003b4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	460a      	mov	r2, r1
 8003b50:	eb42 0303 	adc.w	r3, r2, r3
 8003b54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b60:	667a      	str	r2, [r7, #100]	; 0x64
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b6e:	4649      	mov	r1, r9
 8003b70:	008b      	lsls	r3, r1, #2
 8003b72:	4641      	mov	r1, r8
 8003b74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b78:	4641      	mov	r1, r8
 8003b7a:	008a      	lsls	r2, r1, #2
 8003b7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b80:	f7fc fb2e 	bl	80001e0 <__aeabi_uldivmod>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <UART_SetConfig+0x4e4>)
 8003b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2164      	movs	r1, #100	; 0x64
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	3332      	adds	r3, #50	; 0x32
 8003b9c:	4a08      	ldr	r2, [pc, #32]	; (8003bc0 <UART_SetConfig+0x4e4>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	f003 020f 	and.w	r2, r3, #15
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4422      	add	r2, r4
 8003bb0:	609a      	str	r2, [r3, #8]
}
 8003bb2:	bf00      	nop
 8003bb4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bbe:	bf00      	nop
 8003bc0:	51eb851f 	.word	0x51eb851f

08003bc4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bd6:	2b84      	cmp	r3, #132	; 0x84
 8003bd8:	d005      	beq.n	8003be6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003bda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4413      	add	r3, r2
 8003be2:	3303      	adds	r3, #3
 8003be4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003be6:	68fb      	ldr	r3, [r7, #12]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003bf8:	f000 faf6 	bl	80041e8 <vTaskStartScheduler>
  
  return osOK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c04:	b089      	sub	sp, #36	; 0x24
 8003c06:	af04      	add	r7, sp, #16
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d020      	beq.n	8003c56 <osThreadCreate+0x54>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01c      	beq.n	8003c56 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685c      	ldr	r4, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681d      	ldr	r5, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691e      	ldr	r6, [r3, #16]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff ffc8 	bl	8003bc4 <makeFreeRtosPriority>
 8003c34:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c3e:	9202      	str	r2, [sp, #8]
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	9100      	str	r1, [sp, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	4632      	mov	r2, r6
 8003c48:	4629      	mov	r1, r5
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f000 f8ed 	bl	8003e2a <xTaskCreateStatic>
 8003c50:	4603      	mov	r3, r0
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e01c      	b.n	8003c90 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685c      	ldr	r4, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c62:	b29e      	uxth	r6, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff ffaa 	bl	8003bc4 <makeFreeRtosPriority>
 8003c70:	4602      	mov	r2, r0
 8003c72:	f107 030c 	add.w	r3, r7, #12
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	9200      	str	r2, [sp, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	4632      	mov	r2, r6
 8003c7e:	4629      	mov	r1, r5
 8003c80:	4620      	mov	r0, r4
 8003c82:	f000 f92f 	bl	8003ee4 <xTaskCreate>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d001      	beq.n	8003c90 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e000      	b.n	8003c92 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c90:	68fb      	ldr	r3, [r7, #12]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c9a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <osDelay+0x16>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	e000      	b.n	8003cb2 <osDelay+0x18>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fa64 	bl	8004180 <vTaskDelay>
  
  return osOK;
 8003cb8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f103 0208 	add.w	r2, r3, #8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cda:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f103 0208 	add.w	r2, r3, #8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f103 0208 	add.w	r2, r3, #8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	601a      	str	r2, [r3, #0]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d7a:	d103      	bne.n	8003d84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	e00c      	b.n	8003d9e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3308      	adds	r3, #8
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	e002      	b.n	8003d92 <vListInsert+0x2e>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d2f6      	bcs.n	8003d8c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	601a      	str	r2, [r3, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6892      	ldr	r2, [r2, #8]
 8003dec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6852      	ldr	r2, [r2, #4]
 8003df6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d103      	bne.n	8003e0a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	1e5a      	subs	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b08e      	sub	sp, #56	; 0x38
 8003e2e:	af04      	add	r7, sp, #16
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e50:	bf00      	nop
 8003e52:	e7fe      	b.n	8003e52 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10a      	bne.n	8003e70 <xTaskCreateStatic+0x46>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	61fb      	str	r3, [r7, #28]
}
 8003e6c:	bf00      	nop
 8003e6e:	e7fe      	b.n	8003e6e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e70:	23b4      	movs	r3, #180	; 0xb4
 8003e72:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2bb4      	cmp	r3, #180	; 0xb4
 8003e78:	d00a      	beq.n	8003e90 <xTaskCreateStatic+0x66>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	61bb      	str	r3, [r7, #24]
}
 8003e8c:	bf00      	nop
 8003e8e:	e7fe      	b.n	8003e8e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01e      	beq.n	8003ed6 <xTaskCreateStatic+0xac>
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01b      	beq.n	8003ed6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9303      	str	r3, [sp, #12]
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	9302      	str	r3, [sp, #8]
 8003eb8:	f107 0314 	add.w	r3, r7, #20
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f851 	bl	8003f70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ed0:	f000 f8ec 	bl	80040ac <prvAddNewTaskToReadyList>
 8003ed4:	e001      	b.n	8003eda <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003eda:	697b      	ldr	r3, [r7, #20]
	}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3728      	adds	r7, #40	; 0x28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	af04      	add	r7, sp, #16
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fef5 	bl	8004ce8 <pvPortMalloc>
 8003efe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00e      	beq.n	8003f24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f06:	20b4      	movs	r0, #180	; 0xb4
 8003f08:	f000 feee 	bl	8004ce8 <pvPortMalloc>
 8003f0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
 8003f1a:	e005      	b.n	8003f28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f1c:	6978      	ldr	r0, [r7, #20]
 8003f1e:	f000 ffaf 	bl	8004e80 <vPortFree>
 8003f22:	e001      	b.n	8003f28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d017      	beq.n	8003f5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9303      	str	r3, [sp, #12]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	9302      	str	r3, [sp, #8]
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f80f 	bl	8003f70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f52:	69f8      	ldr	r0, [r7, #28]
 8003f54:	f000 f8aa 	bl	80040ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	e002      	b.n	8003f64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f64:	69bb      	ldr	r3, [r7, #24]
	}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f023 0307 	bic.w	r3, r3, #7
 8003f96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	617b      	str	r3, [r7, #20]
}
 8003fb4:	bf00      	nop
 8003fb6:	e7fe      	b.n	8003fb6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01f      	beq.n	8003ffe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	e012      	b.n	8003fea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	7819      	ldrb	r1, [r3, #0]
 8003fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3334      	adds	r3, #52	; 0x34
 8003fd4:	460a      	mov	r2, r1
 8003fd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d006      	beq.n	8003ff2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	2b0f      	cmp	r3, #15
 8003fee:	d9e9      	bls.n	8003fc4 <prvInitialiseNewTask+0x54>
 8003ff0:	e000      	b.n	8003ff4 <prvInitialiseNewTask+0x84>
			{
				break;
 8003ff2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ffc:	e003      	b.n	8004006 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	2b06      	cmp	r3, #6
 800400a:	d901      	bls.n	8004010 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800400c:	2306      	movs	r3, #6
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004014:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800401a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	2200      	movs	r2, #0
 8004020:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	3304      	adds	r3, #4
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fe6b 	bl	8003d02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	3318      	adds	r3, #24
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fe66 	bl	8003d02 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	f1c3 0207 	rsb	r2, r3, #7
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	2200      	movs	r2, #0
 8004050:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004056:	2200      	movs	r2, #0
 8004058:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	334c      	adds	r3, #76	; 0x4c
 8004060:	2260      	movs	r2, #96	; 0x60
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f002 f83b 	bl	80060e0 <memset>
 800406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406c:	4a0c      	ldr	r2, [pc, #48]	; (80040a0 <prvInitialiseNewTask+0x130>)
 800406e:	651a      	str	r2, [r3, #80]	; 0x50
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	4a0c      	ldr	r2, [pc, #48]	; (80040a4 <prvInitialiseNewTask+0x134>)
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <prvInitialiseNewTask+0x138>)
 800407a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	69b8      	ldr	r0, [r7, #24]
 8004082:	f000 fc1f 	bl	80048c4 <pxPortInitialiseStack>
 8004086:	4602      	mov	r2, r0
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004096:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004098:	bf00      	nop
 800409a:	3720      	adds	r7, #32
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	08006324 	.word	0x08006324
 80040a4:	08006344 	.word	0x08006344
 80040a8:	08006304 	.word	0x08006304

080040ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040b4:	f000 fd36 	bl	8004b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040b8:	4b2a      	ldr	r3, [pc, #168]	; (8004164 <prvAddNewTaskToReadyList+0xb8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3301      	adds	r3, #1
 80040be:	4a29      	ldr	r2, [pc, #164]	; (8004164 <prvAddNewTaskToReadyList+0xb8>)
 80040c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040c2:	4b29      	ldr	r3, [pc, #164]	; (8004168 <prvAddNewTaskToReadyList+0xbc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040ca:	4a27      	ldr	r2, [pc, #156]	; (8004168 <prvAddNewTaskToReadyList+0xbc>)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040d0:	4b24      	ldr	r3, [pc, #144]	; (8004164 <prvAddNewTaskToReadyList+0xb8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d110      	bne.n	80040fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040d8:	f000 facc 	bl	8004674 <prvInitialiseTaskLists>
 80040dc:	e00d      	b.n	80040fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040de:	4b23      	ldr	r3, [pc, #140]	; (800416c <prvAddNewTaskToReadyList+0xc0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d109      	bne.n	80040fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040e6:	4b20      	ldr	r3, [pc, #128]	; (8004168 <prvAddNewTaskToReadyList+0xbc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d802      	bhi.n	80040fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040f4:	4a1c      	ldr	r2, [pc, #112]	; (8004168 <prvAddNewTaskToReadyList+0xbc>)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <prvAddNewTaskToReadyList+0xc4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3301      	adds	r3, #1
 8004100:	4a1b      	ldr	r2, [pc, #108]	; (8004170 <prvAddNewTaskToReadyList+0xc4>)
 8004102:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	2201      	movs	r2, #1
 800410a:	409a      	lsls	r2, r3
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <prvAddNewTaskToReadyList+0xc8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4313      	orrs	r3, r2
 8004112:	4a18      	ldr	r2, [pc, #96]	; (8004174 <prvAddNewTaskToReadyList+0xc8>)
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4a15      	ldr	r2, [pc, #84]	; (8004178 <prvAddNewTaskToReadyList+0xcc>)
 8004124:	441a      	add	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3304      	adds	r3, #4
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f7ff fdf5 	bl	8003d1c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004132:	f000 fd27 	bl	8004b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <prvAddNewTaskToReadyList+0xc0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00e      	beq.n	800415c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <prvAddNewTaskToReadyList+0xbc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	429a      	cmp	r2, r3
 800414a:	d207      	bcs.n	800415c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <prvAddNewTaskToReadyList+0xd0>)
 800414e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	200005e0 	.word	0x200005e0
 8004168:	200004e0 	.word	0x200004e0
 800416c:	200005ec 	.word	0x200005ec
 8004170:	200005fc 	.word	0x200005fc
 8004174:	200005e8 	.word	0x200005e8
 8004178:	200004e4 	.word	0x200004e4
 800417c:	e000ed04 	.word	0xe000ed04

08004180 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d017      	beq.n	80041c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <vTaskDelay+0x60>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <vTaskDelay+0x30>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	60bb      	str	r3, [r7, #8]
}
 80041ac:	bf00      	nop
 80041ae:	e7fe      	b.n	80041ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80041b0:	f000 f884 	bl	80042bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041b4:	2100      	movs	r1, #0
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fb1e 	bl	80047f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041bc:	f000 f88c 	bl	80042d8 <xTaskResumeAll>
 80041c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d107      	bne.n	80041d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <vTaskDelay+0x64>)
 80041ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000608 	.word	0x20000608
 80041e4:	e000ed04 	.word	0xe000ed04

080041e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	; 0x28
 80041ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041f6:	463a      	mov	r2, r7
 80041f8:	1d39      	adds	r1, r7, #4
 80041fa:	f107 0308 	add.w	r3, r7, #8
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fc f970 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004204:	6839      	ldr	r1, [r7, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	9202      	str	r2, [sp, #8]
 800420c:	9301      	str	r3, [sp, #4]
 800420e:	2300      	movs	r3, #0
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	2300      	movs	r3, #0
 8004214:	460a      	mov	r2, r1
 8004216:	4921      	ldr	r1, [pc, #132]	; (800429c <vTaskStartScheduler+0xb4>)
 8004218:	4821      	ldr	r0, [pc, #132]	; (80042a0 <vTaskStartScheduler+0xb8>)
 800421a:	f7ff fe06 	bl	8003e2a <xTaskCreateStatic>
 800421e:	4603      	mov	r3, r0
 8004220:	4a20      	ldr	r2, [pc, #128]	; (80042a4 <vTaskStartScheduler+0xbc>)
 8004222:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004224:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <vTaskStartScheduler+0xbc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800422c:	2301      	movs	r3, #1
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	e001      	b.n	8004236 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d11b      	bne.n	8004274 <vTaskStartScheduler+0x8c>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	613b      	str	r3, [r7, #16]
}
 800424e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004250:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <vTaskStartScheduler+0xc0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	334c      	adds	r3, #76	; 0x4c
 8004256:	4a15      	ldr	r2, [pc, #84]	; (80042ac <vTaskStartScheduler+0xc4>)
 8004258:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800425a:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <vTaskStartScheduler+0xc8>)
 800425c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004260:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <vTaskStartScheduler+0xcc>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004268:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <vTaskStartScheduler+0xd0>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800426e:	f000 fbb7 	bl	80049e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004272:	e00e      	b.n	8004292 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800427a:	d10a      	bne.n	8004292 <vTaskStartScheduler+0xaa>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	60fb      	str	r3, [r7, #12]
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <vTaskStartScheduler+0xa8>
}
 8004292:	bf00      	nop
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	080062e0 	.word	0x080062e0
 80042a0:	08004645 	.word	0x08004645
 80042a4:	20000604 	.word	0x20000604
 80042a8:	200004e0 	.word	0x200004e0
 80042ac:	2000001c 	.word	0x2000001c
 80042b0:	20000600 	.word	0x20000600
 80042b4:	200005ec 	.word	0x200005ec
 80042b8:	200005e4 	.word	0x200005e4

080042bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <vTaskSuspendAll+0x18>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3301      	adds	r3, #1
 80042c6:	4a03      	ldr	r2, [pc, #12]	; (80042d4 <vTaskSuspendAll+0x18>)
 80042c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80042ca:	bf00      	nop
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	20000608 	.word	0x20000608

080042d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042e6:	4b41      	ldr	r3, [pc, #260]	; (80043ec <xTaskResumeAll+0x114>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <xTaskResumeAll+0x2c>
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	603b      	str	r3, [r7, #0]
}
 8004300:	bf00      	nop
 8004302:	e7fe      	b.n	8004302 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004304:	f000 fc0e 	bl	8004b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004308:	4b38      	ldr	r3, [pc, #224]	; (80043ec <xTaskResumeAll+0x114>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3b01      	subs	r3, #1
 800430e:	4a37      	ldr	r2, [pc, #220]	; (80043ec <xTaskResumeAll+0x114>)
 8004310:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004312:	4b36      	ldr	r3, [pc, #216]	; (80043ec <xTaskResumeAll+0x114>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d161      	bne.n	80043de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800431a:	4b35      	ldr	r3, [pc, #212]	; (80043f0 <xTaskResumeAll+0x118>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d05d      	beq.n	80043de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004322:	e02e      	b.n	8004382 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004324:	4b33      	ldr	r3, [pc, #204]	; (80043f4 <xTaskResumeAll+0x11c>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3318      	adds	r3, #24
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fd50 	bl	8003dd6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3304      	adds	r3, #4
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fd4b 	bl	8003dd6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	2201      	movs	r2, #1
 8004346:	409a      	lsls	r2, r3
 8004348:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <xTaskResumeAll+0x120>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4313      	orrs	r3, r2
 800434e:	4a2a      	ldr	r2, [pc, #168]	; (80043f8 <xTaskResumeAll+0x120>)
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4a27      	ldr	r2, [pc, #156]	; (80043fc <xTaskResumeAll+0x124>)
 8004360:	441a      	add	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3304      	adds	r3, #4
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f7ff fcd7 	bl	8003d1c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004372:	4b23      	ldr	r3, [pc, #140]	; (8004400 <xTaskResumeAll+0x128>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	429a      	cmp	r2, r3
 800437a:	d302      	bcc.n	8004382 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800437c:	4b21      	ldr	r3, [pc, #132]	; (8004404 <xTaskResumeAll+0x12c>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004382:	4b1c      	ldr	r3, [pc, #112]	; (80043f4 <xTaskResumeAll+0x11c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1cc      	bne.n	8004324 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004390:	f000 fa12 	bl	80047b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004394:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <xTaskResumeAll+0x130>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d010      	beq.n	80043c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043a0:	f000 f836 	bl	8004410 <xTaskIncrementTick>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <xTaskResumeAll+0x12c>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f1      	bne.n	80043a0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80043bc:	4b12      	ldr	r3, [pc, #72]	; (8004408 <xTaskResumeAll+0x130>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <xTaskResumeAll+0x12c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043ca:	2301      	movs	r3, #1
 80043cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043ce:	4b0f      	ldr	r3, [pc, #60]	; (800440c <xTaskResumeAll+0x134>)
 80043d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043de:	f000 fbd1 	bl	8004b84 <vPortExitCritical>

	return xAlreadyYielded;
 80043e2:	68bb      	ldr	r3, [r7, #8]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000608 	.word	0x20000608
 80043f0:	200005e0 	.word	0x200005e0
 80043f4:	200005a0 	.word	0x200005a0
 80043f8:	200005e8 	.word	0x200005e8
 80043fc:	200004e4 	.word	0x200004e4
 8004400:	200004e0 	.word	0x200004e0
 8004404:	200005f4 	.word	0x200005f4
 8004408:	200005f0 	.word	0x200005f0
 800440c:	e000ed04 	.word	0xe000ed04

08004410 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800441a:	4b4e      	ldr	r3, [pc, #312]	; (8004554 <xTaskIncrementTick+0x144>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f040 808e 	bne.w	8004540 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004424:	4b4c      	ldr	r3, [pc, #304]	; (8004558 <xTaskIncrementTick+0x148>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800442c:	4a4a      	ldr	r2, [pc, #296]	; (8004558 <xTaskIncrementTick+0x148>)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d120      	bne.n	800447a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004438:	4b48      	ldr	r3, [pc, #288]	; (800455c <xTaskIncrementTick+0x14c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <xTaskIncrementTick+0x48>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	603b      	str	r3, [r7, #0]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <xTaskIncrementTick+0x46>
 8004458:	4b40      	ldr	r3, [pc, #256]	; (800455c <xTaskIncrementTick+0x14c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	4b40      	ldr	r3, [pc, #256]	; (8004560 <xTaskIncrementTick+0x150>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a3e      	ldr	r2, [pc, #248]	; (800455c <xTaskIncrementTick+0x14c>)
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4a3e      	ldr	r2, [pc, #248]	; (8004560 <xTaskIncrementTick+0x150>)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <xTaskIncrementTick+0x154>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3301      	adds	r3, #1
 8004472:	4a3c      	ldr	r2, [pc, #240]	; (8004564 <xTaskIncrementTick+0x154>)
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	f000 f99f 	bl	80047b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800447a:	4b3b      	ldr	r3, [pc, #236]	; (8004568 <xTaskIncrementTick+0x158>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	429a      	cmp	r2, r3
 8004482:	d348      	bcc.n	8004516 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004484:	4b35      	ldr	r3, [pc, #212]	; (800455c <xTaskIncrementTick+0x14c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d104      	bne.n	8004498 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800448e:	4b36      	ldr	r3, [pc, #216]	; (8004568 <xTaskIncrementTick+0x158>)
 8004490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004494:	601a      	str	r2, [r3, #0]
					break;
 8004496:	e03e      	b.n	8004516 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004498:	4b30      	ldr	r3, [pc, #192]	; (800455c <xTaskIncrementTick+0x14c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d203      	bcs.n	80044b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044b0:	4a2d      	ldr	r2, [pc, #180]	; (8004568 <xTaskIncrementTick+0x158>)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044b6:	e02e      	b.n	8004516 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fc8a 	bl	8003dd6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	3318      	adds	r3, #24
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fc81 	bl	8003dd6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	2201      	movs	r2, #1
 80044da:	409a      	lsls	r2, r3
 80044dc:	4b23      	ldr	r3, [pc, #140]	; (800456c <xTaskIncrementTick+0x15c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	4a22      	ldr	r2, [pc, #136]	; (800456c <xTaskIncrementTick+0x15c>)
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4a1f      	ldr	r2, [pc, #124]	; (8004570 <xTaskIncrementTick+0x160>)
 80044f4:	441a      	add	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4619      	mov	r1, r3
 80044fc:	4610      	mov	r0, r2
 80044fe:	f7ff fc0d 	bl	8003d1c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004506:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <xTaskIncrementTick+0x164>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	429a      	cmp	r2, r3
 800450e:	d3b9      	bcc.n	8004484 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004510:	2301      	movs	r3, #1
 8004512:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004514:	e7b6      	b.n	8004484 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004516:	4b17      	ldr	r3, [pc, #92]	; (8004574 <xTaskIncrementTick+0x164>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451c:	4914      	ldr	r1, [pc, #80]	; (8004570 <xTaskIncrementTick+0x160>)
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d901      	bls.n	8004532 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800452e:	2301      	movs	r3, #1
 8004530:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004532:	4b11      	ldr	r3, [pc, #68]	; (8004578 <xTaskIncrementTick+0x168>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800453a:	2301      	movs	r3, #1
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	e004      	b.n	800454a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004540:	4b0e      	ldr	r3, [pc, #56]	; (800457c <xTaskIncrementTick+0x16c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3301      	adds	r3, #1
 8004546:	4a0d      	ldr	r2, [pc, #52]	; (800457c <xTaskIncrementTick+0x16c>)
 8004548:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800454a:	697b      	ldr	r3, [r7, #20]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000608 	.word	0x20000608
 8004558:	200005e4 	.word	0x200005e4
 800455c:	20000598 	.word	0x20000598
 8004560:	2000059c 	.word	0x2000059c
 8004564:	200005f8 	.word	0x200005f8
 8004568:	20000600 	.word	0x20000600
 800456c:	200005e8 	.word	0x200005e8
 8004570:	200004e4 	.word	0x200004e4
 8004574:	200004e0 	.word	0x200004e0
 8004578:	200005f4 	.word	0x200005f4
 800457c:	200005f0 	.word	0x200005f0

08004580 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004586:	4b29      	ldr	r3, [pc, #164]	; (800462c <vTaskSwitchContext+0xac>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800458e:	4b28      	ldr	r3, [pc, #160]	; (8004630 <vTaskSwitchContext+0xb0>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004594:	e044      	b.n	8004620 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004596:	4b26      	ldr	r3, [pc, #152]	; (8004630 <vTaskSwitchContext+0xb0>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800459c:	4b25      	ldr	r3, [pc, #148]	; (8004634 <vTaskSwitchContext+0xb4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	fab3 f383 	clz	r3, r3
 80045a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80045aa:	7afb      	ldrb	r3, [r7, #11]
 80045ac:	f1c3 031f 	rsb	r3, r3, #31
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	4921      	ldr	r1, [pc, #132]	; (8004638 <vTaskSwitchContext+0xb8>)
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <vTaskSwitchContext+0x5c>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	607b      	str	r3, [r7, #4]
}
 80045d8:	bf00      	nop
 80045da:	e7fe      	b.n	80045da <vTaskSwitchContext+0x5a>
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4a14      	ldr	r2, [pc, #80]	; (8004638 <vTaskSwitchContext+0xb8>)
 80045e8:	4413      	add	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	3308      	adds	r3, #8
 80045fe:	429a      	cmp	r2, r3
 8004600:	d104      	bne.n	800460c <vTaskSwitchContext+0x8c>
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	605a      	str	r2, [r3, #4]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	4a0a      	ldr	r2, [pc, #40]	; (800463c <vTaskSwitchContext+0xbc>)
 8004614:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004616:	4b09      	ldr	r3, [pc, #36]	; (800463c <vTaskSwitchContext+0xbc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	334c      	adds	r3, #76	; 0x4c
 800461c:	4a08      	ldr	r2, [pc, #32]	; (8004640 <vTaskSwitchContext+0xc0>)
 800461e:	6013      	str	r3, [r2, #0]
}
 8004620:	bf00      	nop
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	20000608 	.word	0x20000608
 8004630:	200005f4 	.word	0x200005f4
 8004634:	200005e8 	.word	0x200005e8
 8004638:	200004e4 	.word	0x200004e4
 800463c:	200004e0 	.word	0x200004e0
 8004640:	2000001c 	.word	0x2000001c

08004644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800464c:	f000 f852 	bl	80046f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <prvIdleTask+0x28>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d9f9      	bls.n	800464c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <prvIdleTask+0x2c>)
 800465a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004668:	e7f0      	b.n	800464c <prvIdleTask+0x8>
 800466a:	bf00      	nop
 800466c:	200004e4 	.word	0x200004e4
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800467a:	2300      	movs	r3, #0
 800467c:	607b      	str	r3, [r7, #4]
 800467e:	e00c      	b.n	800469a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <prvInitialiseTaskLists+0x60>)
 800468c:	4413      	add	r3, r2
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff fb17 	bl	8003cc2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3301      	adds	r3, #1
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b06      	cmp	r3, #6
 800469e:	d9ef      	bls.n	8004680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046a0:	480d      	ldr	r0, [pc, #52]	; (80046d8 <prvInitialiseTaskLists+0x64>)
 80046a2:	f7ff fb0e 	bl	8003cc2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046a6:	480d      	ldr	r0, [pc, #52]	; (80046dc <prvInitialiseTaskLists+0x68>)
 80046a8:	f7ff fb0b 	bl	8003cc2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046ac:	480c      	ldr	r0, [pc, #48]	; (80046e0 <prvInitialiseTaskLists+0x6c>)
 80046ae:	f7ff fb08 	bl	8003cc2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046b2:	480c      	ldr	r0, [pc, #48]	; (80046e4 <prvInitialiseTaskLists+0x70>)
 80046b4:	f7ff fb05 	bl	8003cc2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046b8:	480b      	ldr	r0, [pc, #44]	; (80046e8 <prvInitialiseTaskLists+0x74>)
 80046ba:	f7ff fb02 	bl	8003cc2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046be:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <prvInitialiseTaskLists+0x78>)
 80046c0:	4a05      	ldr	r2, [pc, #20]	; (80046d8 <prvInitialiseTaskLists+0x64>)
 80046c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046c4:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <prvInitialiseTaskLists+0x7c>)
 80046c6:	4a05      	ldr	r2, [pc, #20]	; (80046dc <prvInitialiseTaskLists+0x68>)
 80046c8:	601a      	str	r2, [r3, #0]
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	200004e4 	.word	0x200004e4
 80046d8:	20000570 	.word	0x20000570
 80046dc:	20000584 	.word	0x20000584
 80046e0:	200005a0 	.word	0x200005a0
 80046e4:	200005b4 	.word	0x200005b4
 80046e8:	200005cc 	.word	0x200005cc
 80046ec:	20000598 	.word	0x20000598
 80046f0:	2000059c 	.word	0x2000059c

080046f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046fa:	e019      	b.n	8004730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046fc:	f000 fa12 	bl	8004b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004700:	4b10      	ldr	r3, [pc, #64]	; (8004744 <prvCheckTasksWaitingTermination+0x50>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fb62 	bl	8003dd6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004712:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <prvCheckTasksWaitingTermination+0x54>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3b01      	subs	r3, #1
 8004718:	4a0b      	ldr	r2, [pc, #44]	; (8004748 <prvCheckTasksWaitingTermination+0x54>)
 800471a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <prvCheckTasksWaitingTermination+0x58>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3b01      	subs	r3, #1
 8004722:	4a0a      	ldr	r2, [pc, #40]	; (800474c <prvCheckTasksWaitingTermination+0x58>)
 8004724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004726:	f000 fa2d 	bl	8004b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f810 	bl	8004750 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <prvCheckTasksWaitingTermination+0x58>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e1      	bne.n	80046fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	200005b4 	.word	0x200005b4
 8004748:	200005e0 	.word	0x200005e0
 800474c:	200005c8 	.word	0x200005c8

08004750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	334c      	adds	r3, #76	; 0x4c
 800475c:	4618      	mov	r0, r3
 800475e:	f001 fcd5 	bl	800610c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d108      	bne.n	800477e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fb85 	bl	8004e80 <vPortFree>
				vPortFree( pxTCB );
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fb82 	bl	8004e80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800477c:	e018      	b.n	80047b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004784:	2b01      	cmp	r3, #1
 8004786:	d103      	bne.n	8004790 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fb79 	bl	8004e80 <vPortFree>
	}
 800478e:	e00f      	b.n	80047b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004796:	2b02      	cmp	r3, #2
 8004798:	d00a      	beq.n	80047b0 <prvDeleteTCB+0x60>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60fb      	str	r3, [r7, #12]
}
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <prvDeleteTCB+0x5e>
	}
 80047b0:	bf00      	nop
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047be:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <prvResetNextTaskUnblockTime+0x38>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047c8:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <prvResetNextTaskUnblockTime+0x3c>)
 80047ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047d0:	e008      	b.n	80047e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d2:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <prvResetNextTaskUnblockTime+0x38>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <prvResetNextTaskUnblockTime+0x3c>)
 80047e2:	6013      	str	r3, [r2, #0]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	20000598 	.word	0x20000598
 80047f4:	20000600 	.word	0x20000600

080047f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004802:	4b29      	ldr	r3, [pc, #164]	; (80048a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004808:	4b28      	ldr	r3, [pc, #160]	; (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3304      	adds	r3, #4
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fae1 	bl	8003dd6 <uxListRemove>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800481a:	4b24      	ldr	r3, [pc, #144]	; (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	2201      	movs	r2, #1
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43da      	mvns	r2, r3
 8004828:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4013      	ands	r3, r2
 800482e:	4a20      	ldr	r2, [pc, #128]	; (80048b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004830:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004838:	d10a      	bne.n	8004850 <prvAddCurrentTaskToDelayedList+0x58>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004840:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3304      	adds	r3, #4
 8004846:	4619      	mov	r1, r3
 8004848:	481a      	ldr	r0, [pc, #104]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800484a:	f7ff fa67 	bl	8003d1c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800484e:	e026      	b.n	800489e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004858:	4b14      	ldr	r3, [pc, #80]	; (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	429a      	cmp	r2, r3
 8004866:	d209      	bcs.n	800487c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004868:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7ff fa75 	bl	8003d64 <vListInsert>
}
 800487a:	e010      	b.n	800489e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800487c:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3304      	adds	r3, #4
 8004886:	4619      	mov	r1, r3
 8004888:	4610      	mov	r0, r2
 800488a:	f7ff fa6b 	bl	8003d64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800488e:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	429a      	cmp	r2, r3
 8004896:	d202      	bcs.n	800489e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004898:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6013      	str	r3, [r2, #0]
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	200005e4 	.word	0x200005e4
 80048ac:	200004e0 	.word	0x200004e0
 80048b0:	200005e8 	.word	0x200005e8
 80048b4:	200005cc 	.word	0x200005cc
 80048b8:	2000059c 	.word	0x2000059c
 80048bc:	20000598 	.word	0x20000598
 80048c0:	20000600 	.word	0x20000600

080048c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3b04      	subs	r3, #4
 80048d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3b04      	subs	r3, #4
 80048e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f023 0201 	bic.w	r2, r3, #1
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3b04      	subs	r3, #4
 80048f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048f4:	4a0c      	ldr	r2, [pc, #48]	; (8004928 <pxPortInitialiseStack+0x64>)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3b14      	subs	r3, #20
 80048fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3b04      	subs	r3, #4
 800490a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f06f 0202 	mvn.w	r2, #2
 8004912:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3b20      	subs	r3, #32
 8004918:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800491a:	68fb      	ldr	r3, [r7, #12]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	0800492d 	.word	0x0800492d

0800492c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004936:	4b12      	ldr	r3, [pc, #72]	; (8004980 <prvTaskExitError+0x54>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800493e:	d00a      	beq.n	8004956 <prvTaskExitError+0x2a>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	60fb      	str	r3, [r7, #12]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <prvTaskExitError+0x28>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	60bb      	str	r3, [r7, #8]
}
 8004968:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800496a:	bf00      	nop
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0fc      	beq.n	800496c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	20000018 	.word	0x20000018
	...

08004990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <pxCurrentTCBConst2>)
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	6808      	ldr	r0, [r1, #0]
 8004996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499a:	f380 8809 	msr	PSP, r0
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f04f 0000 	mov.w	r0, #0
 80049a6:	f380 8811 	msr	BASEPRI, r0
 80049aa:	4770      	bx	lr
 80049ac:	f3af 8000 	nop.w

080049b0 <pxCurrentTCBConst2>:
 80049b0:	200004e0 	.word	0x200004e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop

080049b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049b8:	4808      	ldr	r0, [pc, #32]	; (80049dc <prvPortStartFirstTask+0x24>)
 80049ba:	6800      	ldr	r0, [r0, #0]
 80049bc:	6800      	ldr	r0, [r0, #0]
 80049be:	f380 8808 	msr	MSP, r0
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f380 8814 	msr	CONTROL, r0
 80049ca:	b662      	cpsie	i
 80049cc:	b661      	cpsie	f
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	df00      	svc	0
 80049d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049da:	bf00      	nop
 80049dc:	e000ed08 	.word	0xe000ed08

080049e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049e6:	4b46      	ldr	r3, [pc, #280]	; (8004b00 <xPortStartScheduler+0x120>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a46      	ldr	r2, [pc, #280]	; (8004b04 <xPortStartScheduler+0x124>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d10a      	bne.n	8004a06 <xPortStartScheduler+0x26>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	613b      	str	r3, [r7, #16]
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a06:	4b3e      	ldr	r3, [pc, #248]	; (8004b00 <xPortStartScheduler+0x120>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a3f      	ldr	r2, [pc, #252]	; (8004b08 <xPortStartScheduler+0x128>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d10a      	bne.n	8004a26 <xPortStartScheduler+0x46>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	60fb      	str	r3, [r7, #12]
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a26:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	22ff      	movs	r2, #255	; 0xff
 8004a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a40:	78fb      	ldrb	r3, [r7, #3]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <xPortStartScheduler+0x130>)
 8004a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a4e:	4b31      	ldr	r3, [pc, #196]	; (8004b14 <xPortStartScheduler+0x134>)
 8004a50:	2207      	movs	r2, #7
 8004a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a54:	e009      	b.n	8004a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a56:	4b2f      	ldr	r3, [pc, #188]	; (8004b14 <xPortStartScheduler+0x134>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	4a2d      	ldr	r2, [pc, #180]	; (8004b14 <xPortStartScheduler+0x134>)
 8004a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a72:	2b80      	cmp	r3, #128	; 0x80
 8004a74:	d0ef      	beq.n	8004a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a76:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <xPortStartScheduler+0x134>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f1c3 0307 	rsb	r3, r3, #7
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d00a      	beq.n	8004a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60bb      	str	r3, [r7, #8]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a98:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <xPortStartScheduler+0x134>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <xPortStartScheduler+0x134>)
 8004aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004aa2:	4b1c      	ldr	r3, [pc, #112]	; (8004b14 <xPortStartScheduler+0x134>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004aaa:	4a1a      	ldr	r2, [pc, #104]	; (8004b14 <xPortStartScheduler+0x134>)
 8004aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ab6:	4b18      	ldr	r3, [pc, #96]	; (8004b18 <xPortStartScheduler+0x138>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a17      	ldr	r2, [pc, #92]	; (8004b18 <xPortStartScheduler+0x138>)
 8004abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <xPortStartScheduler+0x138>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <xPortStartScheduler+0x138>)
 8004ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ace:	f000 f8dd 	bl	8004c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ad2:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <xPortStartScheduler+0x13c>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ad8:	f000 f8fc 	bl	8004cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004adc:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <xPortStartScheduler+0x140>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a0f      	ldr	r2, [pc, #60]	; (8004b20 <xPortStartScheduler+0x140>)
 8004ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ae8:	f7ff ff66 	bl	80049b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004aec:	f7ff fd48 	bl	8004580 <vTaskSwitchContext>
	prvTaskExitError();
 8004af0:	f7ff ff1c 	bl	800492c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	e000ed00 	.word	0xe000ed00
 8004b04:	410fc271 	.word	0x410fc271
 8004b08:	410fc270 	.word	0x410fc270
 8004b0c:	e000e400 	.word	0xe000e400
 8004b10:	2000060c 	.word	0x2000060c
 8004b14:	20000610 	.word	0x20000610
 8004b18:	e000ed20 	.word	0xe000ed20
 8004b1c:	20000018 	.word	0x20000018
 8004b20:	e000ef34 	.word	0xe000ef34

08004b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	607b      	str	r3, [r7, #4]
}
 8004b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b3e:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <vPortEnterCritical+0x58>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3301      	adds	r3, #1
 8004b44:	4a0d      	ldr	r2, [pc, #52]	; (8004b7c <vPortEnterCritical+0x58>)
 8004b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b48:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <vPortEnterCritical+0x58>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d10f      	bne.n	8004b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <vPortEnterCritical+0x5c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	603b      	str	r3, [r7, #0]
}
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <vPortEnterCritical+0x4a>
	}
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	20000018 	.word	0x20000018
 8004b80:	e000ed04 	.word	0xe000ed04

08004b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <vPortExitCritical+0x50>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10a      	bne.n	8004ba8 <vPortExitCritical+0x24>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	607b      	str	r3, [r7, #4]
}
 8004ba4:	bf00      	nop
 8004ba6:	e7fe      	b.n	8004ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <vPortExitCritical+0x50>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <vPortExitCritical+0x50>)
 8004bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bb2:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <vPortExitCritical+0x50>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <vPortExitCritical+0x42>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000018 	.word	0x20000018
	...

08004be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004be0:	f3ef 8009 	mrs	r0, PSP
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <pxCurrentTCBConst>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	f01e 0f10 	tst.w	lr, #16
 8004bf0:	bf08      	it	eq
 8004bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfa:	6010      	str	r0, [r2, #0]
 8004bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c04:	f380 8811 	msr	BASEPRI, r0
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f7ff fcb6 	bl	8004580 <vTaskSwitchContext>
 8004c14:	f04f 0000 	mov.w	r0, #0
 8004c18:	f380 8811 	msr	BASEPRI, r0
 8004c1c:	bc09      	pop	{r0, r3}
 8004c1e:	6819      	ldr	r1, [r3, #0]
 8004c20:	6808      	ldr	r0, [r1, #0]
 8004c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c26:	f01e 0f10 	tst.w	lr, #16
 8004c2a:	bf08      	it	eq
 8004c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c30:	f380 8809 	msr	PSP, r0
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	f3af 8000 	nop.w

08004c40 <pxCurrentTCBConst>:
 8004c40:	200004e0 	.word	0x200004e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop

08004c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	607b      	str	r3, [r7, #4]
}
 8004c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c62:	f7ff fbd5 	bl	8004410 <xTaskIncrementTick>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <SysTick_Handler+0x40>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	2300      	movs	r3, #0
 8004c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	f383 8811 	msr	BASEPRI, r3
}
 8004c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <vPortSetupTimerInterrupt+0x34>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c96:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <vPortSetupTimerInterrupt+0x38>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <vPortSetupTimerInterrupt+0x3c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a0a      	ldr	r2, [pc, #40]	; (8004ccc <vPortSetupTimerInterrupt+0x40>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	4a09      	ldr	r2, [pc, #36]	; (8004cd0 <vPortSetupTimerInterrupt+0x44>)
 8004caa:	3b01      	subs	r3, #1
 8004cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cae:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <vPortSetupTimerInterrupt+0x34>)
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	601a      	str	r2, [r3, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	e000e010 	.word	0xe000e010
 8004cc4:	e000e018 	.word	0xe000e018
 8004cc8:	2000000c 	.word	0x2000000c
 8004ccc:	10624dd3 	.word	0x10624dd3
 8004cd0:	e000e014 	.word	0xe000e014

08004cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ce4 <vPortEnableVFP+0x10>
 8004cd8:	6801      	ldr	r1, [r0, #0]
 8004cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cde:	6001      	str	r1, [r0, #0]
 8004ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ce2:	bf00      	nop
 8004ce4:	e000ed88 	.word	0xe000ed88

08004ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	; 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cf4:	f7ff fae2 	bl	80042bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cf8:	4b5b      	ldr	r3, [pc, #364]	; (8004e68 <pvPortMalloc+0x180>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d00:	f000 f920 	bl	8004f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d04:	4b59      	ldr	r3, [pc, #356]	; (8004e6c <pvPortMalloc+0x184>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f040 8093 	bne.w	8004e38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01d      	beq.n	8004d54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d18:	2208      	movs	r2, #8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d014      	beq.n	8004d54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f023 0307 	bic.w	r3, r3, #7
 8004d30:	3308      	adds	r3, #8
 8004d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <pvPortMalloc+0x6c>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	617b      	str	r3, [r7, #20]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d06e      	beq.n	8004e38 <pvPortMalloc+0x150>
 8004d5a:	4b45      	ldr	r3, [pc, #276]	; (8004e70 <pvPortMalloc+0x188>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d869      	bhi.n	8004e38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d64:	4b43      	ldr	r3, [pc, #268]	; (8004e74 <pvPortMalloc+0x18c>)
 8004d66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d68:	4b42      	ldr	r3, [pc, #264]	; (8004e74 <pvPortMalloc+0x18c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d6e:	e004      	b.n	8004d7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d903      	bls.n	8004d8c <pvPortMalloc+0xa4>
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f1      	bne.n	8004d70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d8c:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <pvPortMalloc+0x180>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d050      	beq.n	8004e38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2208      	movs	r2, #8
 8004d9c:	4413      	add	r3, r2
 8004d9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	1ad2      	subs	r2, r2, r3
 8004db0:	2308      	movs	r3, #8
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d91f      	bls.n	8004df8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <pvPortMalloc+0xf8>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	613b      	str	r3, [r7, #16]
}
 8004ddc:	bf00      	nop
 8004dde:	e7fe      	b.n	8004dde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	1ad2      	subs	r2, r2, r3
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004df2:	69b8      	ldr	r0, [r7, #24]
 8004df4:	f000 f908 	bl	8005008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004df8:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <pvPortMalloc+0x188>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	4a1b      	ldr	r2, [pc, #108]	; (8004e70 <pvPortMalloc+0x188>)
 8004e04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e06:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <pvPortMalloc+0x188>)
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4b1b      	ldr	r3, [pc, #108]	; (8004e78 <pvPortMalloc+0x190>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d203      	bcs.n	8004e1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e12:	4b17      	ldr	r3, [pc, #92]	; (8004e70 <pvPortMalloc+0x188>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <pvPortMalloc+0x190>)
 8004e18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <pvPortMalloc+0x184>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <pvPortMalloc+0x194>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3301      	adds	r3, #1
 8004e34:	4a11      	ldr	r2, [pc, #68]	; (8004e7c <pvPortMalloc+0x194>)
 8004e36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e38:	f7ff fa4e 	bl	80042d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <pvPortMalloc+0x174>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	60fb      	str	r3, [r7, #12]
}
 8004e58:	bf00      	nop
 8004e5a:	e7fe      	b.n	8004e5a <pvPortMalloc+0x172>
	return pvReturn;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3728      	adds	r7, #40	; 0x28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	2000421c 	.word	0x2000421c
 8004e6c:	20004230 	.word	0x20004230
 8004e70:	20004220 	.word	0x20004220
 8004e74:	20004214 	.word	0x20004214
 8004e78:	20004224 	.word	0x20004224
 8004e7c:	20004228 	.word	0x20004228

08004e80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d04d      	beq.n	8004f2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e92:	2308      	movs	r3, #8
 8004e94:	425b      	negs	r3, r3
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4413      	add	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	4b24      	ldr	r3, [pc, #144]	; (8004f38 <vPortFree+0xb8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <vPortFree+0x44>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	60fb      	str	r3, [r7, #12]
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <vPortFree+0x62>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	60bb      	str	r3, [r7, #8]
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	4b14      	ldr	r3, [pc, #80]	; (8004f38 <vPortFree+0xb8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01e      	beq.n	8004f2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d11a      	bne.n	8004f2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <vPortFree+0xb8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	43db      	mvns	r3, r3
 8004f02:	401a      	ands	r2, r3
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f08:	f7ff f9d8 	bl	80042bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <vPortFree+0xbc>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4413      	add	r3, r2
 8004f16:	4a09      	ldr	r2, [pc, #36]	; (8004f3c <vPortFree+0xbc>)
 8004f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f1a:	6938      	ldr	r0, [r7, #16]
 8004f1c:	f000 f874 	bl	8005008 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f20:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <vPortFree+0xc0>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3301      	adds	r3, #1
 8004f26:	4a06      	ldr	r2, [pc, #24]	; (8004f40 <vPortFree+0xc0>)
 8004f28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f2a:	f7ff f9d5 	bl	80042d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f2e:	bf00      	nop
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20004230 	.word	0x20004230
 8004f3c:	20004220 	.word	0x20004220
 8004f40:	2000422c 	.word	0x2000422c

08004f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f50:	4b27      	ldr	r3, [pc, #156]	; (8004ff0 <prvHeapInit+0xac>)
 8004f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00c      	beq.n	8004f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3307      	adds	r3, #7
 8004f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0307 	bic.w	r3, r3, #7
 8004f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <prvHeapInit+0xac>)
 8004f74:	4413      	add	r3, r2
 8004f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <prvHeapInit+0xb0>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f82:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <prvHeapInit+0xb0>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f90:	2208      	movs	r2, #8
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0307 	bic.w	r3, r3, #7
 8004f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <prvHeapInit+0xb4>)
 8004fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fa6:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <prvHeapInit+0xb4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2200      	movs	r2, #0
 8004fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fae:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <prvHeapInit+0xb4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	1ad2      	subs	r2, r2, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <prvHeapInit+0xb4>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <prvHeapInit+0xb8>)
 8004fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a09      	ldr	r2, [pc, #36]	; (8005000 <prvHeapInit+0xbc>)
 8004fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <prvHeapInit+0xc0>)
 8004fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fe2:	601a      	str	r2, [r3, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20000614 	.word	0x20000614
 8004ff4:	20004214 	.word	0x20004214
 8004ff8:	2000421c 	.word	0x2000421c
 8004ffc:	20004224 	.word	0x20004224
 8005000:	20004220 	.word	0x20004220
 8005004:	20004230 	.word	0x20004230

08005008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005010:	4b28      	ldr	r3, [pc, #160]	; (80050b4 <prvInsertBlockIntoFreeList+0xac>)
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	e002      	b.n	800501c <prvInsertBlockIntoFreeList+0x14>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d8f7      	bhi.n	8005016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	4413      	add	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	429a      	cmp	r2, r3
 8005036:	d108      	bne.n	800504a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	441a      	add	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	441a      	add	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d118      	bne.n	8005090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d00d      	beq.n	8005086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	441a      	add	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	e008      	b.n	8005098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e003      	b.n	8005098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	429a      	cmp	r2, r3
 800509e:	d002      	beq.n	80050a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050a6:	bf00      	nop
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20004214 	.word	0x20004214
 80050b8:	2000421c 	.word	0x2000421c

080050bc <B2D>:
 *      Author: hoanganh
 */
#include "DS3231.h"

static uint8_t B2D(uint8_t bcd) //hàm để chuyển giá trị ở các bit hàng chục
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	4603      	mov	r3, r0
 80050c4:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	0092      	lsls	r2, r2, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	4413      	add	r3, r2
 80050e0:	b2db      	uxtb	r3, r3
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <D2B>:

static uint8_t D2B(uint8_t decimal) //hàm để chuyển giá trị ở các bit hàng chục
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	4a0d      	ldr	r2, [pc, #52]	; (8005134 <D2B+0x44>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	08db      	lsrs	r3, r3, #3
 8005104:	b2db      	uxtb	r3, r3
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	b258      	sxtb	r0, r3
 800510a:	79fa      	ldrb	r2, [r7, #7]
 800510c:	4b09      	ldr	r3, [pc, #36]	; (8005134 <D2B+0x44>)
 800510e:	fba3 1302 	umull	r1, r3, r3, r2
 8005112:	08d9      	lsrs	r1, r3, #3
 8005114:	460b      	mov	r3, r1
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	b2db      	uxtb	r3, r3
 8005120:	b25b      	sxtb	r3, r3
 8005122:	4303      	orrs	r3, r0
 8005124:	b25b      	sxtb	r3, r3
 8005126:	b2db      	uxtb	r3, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	cccccccd 	.word	0xcccccccd

08005138 <ds3231_getTime>:

bool ds3231_getTime(rtc_t* _rtc)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af02      	add	r7, sp, #8
 800513e:	6078      	str	r0, [r7, #4]
	uint8_t startAddr = DS3231_REG_TIME;
 8005140:	2300      	movs	r3, #0
 8005142:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[7] = {0,};
 8005144:	2300      	movs	r3, #0
 8005146:	60bb      	str	r3, [r7, #8]
 8005148:	f107 030c 	add.w	r3, r7, #12
 800514c:	2100      	movs	r1, #0
 800514e:	460a      	mov	r2, r1
 8005150:	801a      	strh	r2, [r3, #0]
 8005152:	460a      	mov	r2, r1
 8005154:	709a      	strb	r2, [r3, #2]
	if(HAL_I2C_Master_Transmit(_rtc->hi2c,DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6898      	ldr	r0, [r3, #8]
 800515a:	f107 020f 	add.w	r2, r7, #15
 800515e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2301      	movs	r3, #1
 8005166:	21d0      	movs	r1, #208	; 0xd0
 8005168:	f7fc fa66 	bl	8001638 <HAL_I2C_Master_Transmit>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <ds3231_getTime+0x3e>
 8005172:	2300      	movs	r3, #0
 8005174:	e055      	b.n	8005222 <ds3231_getTime+0xea>
	if(HAL_I2C_Master_Receive(_rtc->hi2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6898      	ldr	r0, [r3, #8]
 800517a:	f107 0208 	add.w	r2, r7, #8
 800517e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	2307      	movs	r3, #7
 8005186:	21d0      	movs	r1, #208	; 0xd0
 8005188:	f7fc fb54 	bl	8001834 <HAL_I2C_Master_Receive>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <ds3231_getTime+0x5e>
 8005192:	2300      	movs	r3, #0
 8005194:	e045      	b.n	8005222 <ds3231_getTime+0xea>
	_rtc->Sec = B2D(buffer[0] & 0x7F);
 8005196:	7a3b      	ldrb	r3, [r7, #8]
 8005198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519c:	b2db      	uxtb	r3, r3
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff ff8c 	bl	80050bc <B2D>
 80051a4:	4603      	mov	r3, r0
 80051a6:	461a      	mov	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	719a      	strb	r2, [r3, #6]
	_rtc->Min = B2D(buffer[1] & 0x7F);
 80051ac:	7a7b      	ldrb	r3, [r7, #9]
 80051ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ff81 	bl	80050bc <B2D>
 80051ba:	4603      	mov	r3, r0
 80051bc:	461a      	mov	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	715a      	strb	r2, [r3, #5]
	_rtc->Hour = B2D(buffer[2] & 0x3F);
 80051c2:	7abb      	ldrb	r3, [r7, #10]
 80051c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff ff76 	bl	80050bc <B2D>
 80051d0:	4603      	mov	r3, r0
 80051d2:	461a      	mov	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	711a      	strb	r2, [r3, #4]
	_rtc->DayOfWeek = buffer[3] & 0x07;
 80051d8:	7afb      	ldrb	r3, [r7, #11]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	70da      	strb	r2, [r3, #3]
	_rtc->Date = B2D(buffer[4] & 0x3F);
 80051e4:	7b3b      	ldrb	r3, [r7, #12]
 80051e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff ff65 	bl	80050bc <B2D>
 80051f2:	4603      	mov	r3, r0
 80051f4:	461a      	mov	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	709a      	strb	r2, [r3, #2]
	_rtc->Month = B2D(buffer[5] & 0x1F);
 80051fa:	7b7b      	ldrb	r3, [r7, #13]
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	b2db      	uxtb	r3, r3
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff ff5a 	bl	80050bc <B2D>
 8005208:	4603      	mov	r3, r0
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	705a      	strb	r2, [r3, #1]
	_rtc->Year = B2D(buffer[6]);
 8005210:	7bbb      	ldrb	r3, [r7, #14]
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff ff52 	bl	80050bc <B2D>
 8005218:	4603      	mov	r3, r0
 800521a:	461a      	mov	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	701a      	strb	r2, [r3, #0]

	return true;
 8005220:	2301      	movs	r3, #1
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <ds3231_setTime>:

bool ds3231_setTime(rtc_t* _rtc)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b088      	sub	sp, #32
 800522e:	af02      	add	r7, sp, #8
 8005230:	6078      	str	r0, [r7, #4]
	uint8_t startAddr = DS3231_REG_TIME;
 8005232:	2300      	movs	r3, #0
 8005234:	75fb      	strb	r3, [r7, #23]
	uint8_t buffer[8] = {startAddr,D2B(_rtc->Sec),D2B(_rtc->Min),D2B(_rtc->Hour),_rtc->DayOfWeek,D2B(_rtc->Date),D2B(_rtc->Month),D2B(_rtc->Year)};
 8005236:	7dfb      	ldrb	r3, [r7, #23]
 8005238:	733b      	strb	r3, [r7, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	799b      	ldrb	r3, [r3, #6]
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff ff56 	bl	80050f0 <D2B>
 8005244:	4603      	mov	r3, r0
 8005246:	737b      	strb	r3, [r7, #13]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	795b      	ldrb	r3, [r3, #5]
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff ff4f 	bl	80050f0 <D2B>
 8005252:	4603      	mov	r3, r0
 8005254:	73bb      	strb	r3, [r7, #14]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	791b      	ldrb	r3, [r3, #4]
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff ff48 	bl	80050f0 <D2B>
 8005260:	4603      	mov	r3, r0
 8005262:	73fb      	strb	r3, [r7, #15]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	78db      	ldrb	r3, [r3, #3]
 8005268:	743b      	strb	r3, [r7, #16]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	789b      	ldrb	r3, [r3, #2]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff ff3e 	bl	80050f0 <D2B>
 8005274:	4603      	mov	r3, r0
 8005276:	747b      	strb	r3, [r7, #17]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff ff37 	bl	80050f0 <D2B>
 8005282:	4603      	mov	r3, r0
 8005284:	74bb      	strb	r3, [r7, #18]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff ff30 	bl	80050f0 <D2B>
 8005290:	4603      	mov	r3, r0
 8005292:	74fb      	strb	r3, [r7, #19]
	if(HAL_I2C_Master_Transmit(_rtc->hi2c, DS3231_ADDR, buffer, sizeof(buffer),HAL_MAX_DELAY) != HAL_OK) return false;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6898      	ldr	r0, [r3, #8]
 8005298:	f107 020c 	add.w	r2, r7, #12
 800529c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	2308      	movs	r3, #8
 80052a4:	21d0      	movs	r1, #208	; 0xd0
 80052a6:	f7fc f9c7 	bl	8001638 <HAL_I2C_Master_Transmit>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <ds3231_setTime+0x8a>
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <ds3231_setTime+0x8c>

	return true;
 80052b4:	2301      	movs	r3, #1
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	460b      	mov	r3, r1
 80052c8:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80052ca:	887b      	ldrh	r3, [r7, #2]
 80052cc:	2200      	movs	r2, #0
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7fc f82f 	bl	8001334 <HAL_GPIO_WritePin>
}
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	460b      	mov	r3, r1
 80052e8:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80052ea:	887b      	ldrh	r3, [r7, #2]
 80052ec:	2201      	movs	r2, #1
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fc f81f 	bl	8001334 <HAL_GPIO_WritePin>
}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b088      	sub	sp, #32
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	460b      	mov	r3, r1
 8005308:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 800530a:	887b      	ldrh	r3, [r7, #2]
 800530c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800530e:	2300      	movs	r3, #0
 8005310:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005312:	2301      	movs	r3, #1
 8005314:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8005316:	f107 030c 	add.w	r3, r7, #12
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7fb fe85 	bl	800102c <HAL_GPIO_Init>
}
 8005322:	bf00      	nop
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b088      	sub	sp, #32
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	460b      	mov	r3, r1
 8005334:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8005336:	887b      	ldrh	r3, [r7, #2]
 8005338:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800533a:	2301      	movs	r3, #1
 800533c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005342:	2302      	movs	r3, #2
 8005344:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8005346:	f107 030c 	add.w	r3, r7, #12
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7fb fe6d 	bl	800102c <HAL_GPIO_Init>
}
 8005352:	bf00      	nop
 8005354:	3720      	adds	r7, #32
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

static void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	4603      	mov	r3, r0
 8005362:	460a      	mov	r2, r1
 8005364:	80fb      	strh	r3, [r7, #6]
 8005366:	4613      	mov	r3, r2
 8005368:	80bb      	strh	r3, [r7, #4]
 800536a:	88ba      	ldrh	r2, [r7, #4]
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f000 f88f 	bl	8005494 <writecmddata>
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	4603      	mov	r3, r0
 8005386:	6039      	str	r1, [r7, #0]
 8005388:	80fb      	strh	r3, [r7, #6]
 800538a:	4613      	mov	r3, r2
 800538c:	717b      	strb	r3, [r7, #5]
 800538e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f990 	bl	80056bc <WriteCmdParamN>
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <delay>:



extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80053ac:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <delay+0x2c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2200      	movs	r2, #0
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 80053b4:	bf00      	nop
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <delay+0x2c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d8f9      	bhi.n	80053b6 <delay+0x12>
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	200003fc 	.word	0x200003fc

080053d4 <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
	PIN_INPUT(GPIOA, D0_PIN);
 80053d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053dc:	4813      	ldr	r0, [pc, #76]	; (800542c <setReadDir+0x58>)
 80053de:	f7ff ff8e 	bl	80052fe <PIN_INPUT>
	PIN_INPUT(GPIOA, D1_PIN);
 80053e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053e6:	4811      	ldr	r0, [pc, #68]	; (800542c <setReadDir+0x58>)
 80053e8:	f7ff ff89 	bl	80052fe <PIN_INPUT>
	PIN_INPUT(GPIOA, D2_PIN);
 80053ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053f0:	480e      	ldr	r0, [pc, #56]	; (800542c <setReadDir+0x58>)
 80053f2:	f7ff ff84 	bl	80052fe <PIN_INPUT>
	PIN_INPUT(GPIOA, D3_PIN);
 80053f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053fa:	480c      	ldr	r0, [pc, #48]	; (800542c <setReadDir+0x58>)
 80053fc:	f7ff ff7f 	bl	80052fe <PIN_INPUT>
	PIN_INPUT(GPIOB, D4_PIN);
 8005400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005404:	480a      	ldr	r0, [pc, #40]	; (8005430 <setReadDir+0x5c>)
 8005406:	f7ff ff7a 	bl	80052fe <PIN_INPUT>
	PIN_INPUT(GPIOB, D5_PIN);
 800540a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800540e:	4808      	ldr	r0, [pc, #32]	; (8005430 <setReadDir+0x5c>)
 8005410:	f7ff ff75 	bl	80052fe <PIN_INPUT>
	PIN_INPUT(GPIOB, D6_PIN);
 8005414:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005418:	4805      	ldr	r0, [pc, #20]	; (8005430 <setReadDir+0x5c>)
 800541a:	f7ff ff70 	bl	80052fe <PIN_INPUT>
	PIN_INPUT(GPIOB, D7_PIN);
 800541e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005422:	4803      	ldr	r0, [pc, #12]	; (8005430 <setReadDir+0x5c>)
 8005424:	f7ff ff6b 	bl	80052fe <PIN_INPUT>
}
 8005428:	bf00      	nop
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40020000 	.word	0x40020000
 8005430:	40020400 	.word	0x40020400

08005434 <setWriteDir>:

void setWriteDir (void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
	PIN_OUTPUT(GPIOA, D0_PIN);
 8005438:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800543c:	4813      	ldr	r0, [pc, #76]	; (800548c <setWriteDir+0x58>)
 800543e:	f7ff ff74 	bl	800532a <PIN_OUTPUT>
	PIN_OUTPUT(GPIOA, D1_PIN);
 8005442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005446:	4811      	ldr	r0, [pc, #68]	; (800548c <setWriteDir+0x58>)
 8005448:	f7ff ff6f 	bl	800532a <PIN_OUTPUT>
	PIN_OUTPUT(GPIOA, D2_PIN);
 800544c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005450:	480e      	ldr	r0, [pc, #56]	; (800548c <setWriteDir+0x58>)
 8005452:	f7ff ff6a 	bl	800532a <PIN_OUTPUT>
	PIN_OUTPUT(GPIOA, D3_PIN);
 8005456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800545a:	480c      	ldr	r0, [pc, #48]	; (800548c <setWriteDir+0x58>)
 800545c:	f7ff ff65 	bl	800532a <PIN_OUTPUT>
	PIN_OUTPUT(GPIOB, D4_PIN);
 8005460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005464:	480a      	ldr	r0, [pc, #40]	; (8005490 <setWriteDir+0x5c>)
 8005466:	f7ff ff60 	bl	800532a <PIN_OUTPUT>
	PIN_OUTPUT(GPIOB, D5_PIN);
 800546a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800546e:	4808      	ldr	r0, [pc, #32]	; (8005490 <setWriteDir+0x5c>)
 8005470:	f7ff ff5b 	bl	800532a <PIN_OUTPUT>
	PIN_OUTPUT(GPIOB, D6_PIN);
 8005474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005478:	4805      	ldr	r0, [pc, #20]	; (8005490 <setWriteDir+0x5c>)
 800547a:	f7ff ff56 	bl	800532a <PIN_OUTPUT>
	PIN_OUTPUT(GPIOB, D7_PIN);
 800547e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005482:	4803      	ldr	r0, [pc, #12]	; (8005490 <setWriteDir+0x5c>)
 8005484:	f7ff ff51 	bl	800532a <PIN_OUTPUT>
}
 8005488:	bf00      	nop
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40020000 	.word	0x40020000
 8005490:	40020400 	.word	0x40020400

08005494 <writecmddata>:
    write8(b);
}


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	460a      	mov	r2, r1
 800549e:	80fb      	strh	r3, [r7, #6]
 80054a0:	4613      	mov	r3, r2
 80054a2:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 80054a4:	2140      	movs	r1, #64	; 0x40
 80054a6:	4883      	ldr	r0, [pc, #524]	; (80056b4 <writecmddata+0x220>)
 80054a8:	f7ff ff09 	bl	80052be <PIN_LOW>
    WriteCmd(cmd);
 80054ac:	2120      	movs	r1, #32
 80054ae:	4881      	ldr	r0, [pc, #516]	; (80056b4 <writecmddata+0x220>)
 80054b0:	f7ff ff05 	bl	80052be <PIN_LOW>
 80054b4:	88fb      	ldrh	r3, [r7, #6]
 80054b6:	0a1b      	lsrs	r3, r3, #8
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	73fb      	strb	r3, [r7, #15]
 80054bc:	88fb      	ldrh	r3, [r7, #6]
 80054be:	73bb      	strb	r3, [r7, #14]
 80054c0:	4b7d      	ldr	r3, [pc, #500]	; (80056b8 <writecmddata+0x224>)
 80054c2:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80054c6:	619a      	str	r2, [r3, #24]
 80054c8:	4b7a      	ldr	r3, [pc, #488]	; (80056b4 <writecmddata+0x220>)
 80054ca:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80054ce:	619a      	str	r2, [r3, #24]
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	02db      	lsls	r3, r3, #11
 80054d4:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	025b      	lsls	r3, r3, #9
 80054dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e0:	431a      	orrs	r2, r3
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	01db      	lsls	r3, r3, #7
 80054e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ea:	431a      	orrs	r2, r3
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	015b      	lsls	r3, r3, #5
 80054f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f4:	431a      	orrs	r2, r3
 80054f6:	4b70      	ldr	r3, [pc, #448]	; (80056b8 <writecmddata+0x224>)
 80054f8:	619a      	str	r2, [r3, #24]
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	02db      	lsls	r3, r3, #11
 80054fe:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	025b      	lsls	r3, r3, #9
 8005506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800550a:	431a      	orrs	r2, r3
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	01db      	lsls	r3, r3, #7
 8005510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005514:	431a      	orrs	r2, r3
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	015b      	lsls	r3, r3, #5
 800551a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800551e:	431a      	orrs	r2, r3
 8005520:	4b64      	ldr	r3, [pc, #400]	; (80056b4 <writecmddata+0x220>)
 8005522:	619a      	str	r2, [r3, #24]
 8005524:	2110      	movs	r1, #16
 8005526:	4863      	ldr	r0, [pc, #396]	; (80056b4 <writecmddata+0x220>)
 8005528:	f7ff fec9 	bl	80052be <PIN_LOW>
 800552c:	2110      	movs	r1, #16
 800552e:	4861      	ldr	r0, [pc, #388]	; (80056b4 <writecmddata+0x220>)
 8005530:	f7ff fed5 	bl	80052de <PIN_HIGH>
 8005534:	4b60      	ldr	r3, [pc, #384]	; (80056b8 <writecmddata+0x224>)
 8005536:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800553a:	619a      	str	r2, [r3, #24]
 800553c:	4b5d      	ldr	r3, [pc, #372]	; (80056b4 <writecmddata+0x220>)
 800553e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8005542:	619a      	str	r2, [r3, #24]
 8005544:	7bbb      	ldrb	r3, [r7, #14]
 8005546:	02db      	lsls	r3, r3, #11
 8005548:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800554c:	7bbb      	ldrb	r3, [r7, #14]
 800554e:	025b      	lsls	r3, r3, #9
 8005550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005554:	431a      	orrs	r2, r3
 8005556:	7bbb      	ldrb	r3, [r7, #14]
 8005558:	01db      	lsls	r3, r3, #7
 800555a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800555e:	431a      	orrs	r2, r3
 8005560:	7bbb      	ldrb	r3, [r7, #14]
 8005562:	015b      	lsls	r3, r3, #5
 8005564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005568:	431a      	orrs	r2, r3
 800556a:	4b53      	ldr	r3, [pc, #332]	; (80056b8 <writecmddata+0x224>)
 800556c:	619a      	str	r2, [r3, #24]
 800556e:	7bbb      	ldrb	r3, [r7, #14]
 8005570:	02db      	lsls	r3, r3, #11
 8005572:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8005576:	7bbb      	ldrb	r3, [r7, #14]
 8005578:	025b      	lsls	r3, r3, #9
 800557a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800557e:	431a      	orrs	r2, r3
 8005580:	7bbb      	ldrb	r3, [r7, #14]
 8005582:	01db      	lsls	r3, r3, #7
 8005584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005588:	431a      	orrs	r2, r3
 800558a:	7bbb      	ldrb	r3, [r7, #14]
 800558c:	015b      	lsls	r3, r3, #5
 800558e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005592:	431a      	orrs	r2, r3
 8005594:	4b47      	ldr	r3, [pc, #284]	; (80056b4 <writecmddata+0x220>)
 8005596:	619a      	str	r2, [r3, #24]
 8005598:	2110      	movs	r1, #16
 800559a:	4846      	ldr	r0, [pc, #280]	; (80056b4 <writecmddata+0x220>)
 800559c:	f7ff fe8f 	bl	80052be <PIN_LOW>
 80055a0:	2110      	movs	r1, #16
 80055a2:	4844      	ldr	r0, [pc, #272]	; (80056b4 <writecmddata+0x220>)
 80055a4:	f7ff fe9b 	bl	80052de <PIN_HIGH>
 80055a8:	2120      	movs	r1, #32
 80055aa:	4842      	ldr	r0, [pc, #264]	; (80056b4 <writecmddata+0x220>)
 80055ac:	f7ff fe97 	bl	80052de <PIN_HIGH>
    WriteData(dat);
 80055b0:	88bb      	ldrh	r3, [r7, #4]
 80055b2:	0a1b      	lsrs	r3, r3, #8
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	737b      	strb	r3, [r7, #13]
 80055b8:	88bb      	ldrh	r3, [r7, #4]
 80055ba:	733b      	strb	r3, [r7, #12]
 80055bc:	4b3e      	ldr	r3, [pc, #248]	; (80056b8 <writecmddata+0x224>)
 80055be:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80055c2:	619a      	str	r2, [r3, #24]
 80055c4:	4b3b      	ldr	r3, [pc, #236]	; (80056b4 <writecmddata+0x220>)
 80055c6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80055ca:	619a      	str	r2, [r3, #24]
 80055cc:	7b7b      	ldrb	r3, [r7, #13]
 80055ce:	02db      	lsls	r3, r3, #11
 80055d0:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80055d4:	7b7b      	ldrb	r3, [r7, #13]
 80055d6:	025b      	lsls	r3, r3, #9
 80055d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055dc:	431a      	orrs	r2, r3
 80055de:	7b7b      	ldrb	r3, [r7, #13]
 80055e0:	01db      	lsls	r3, r3, #7
 80055e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e6:	431a      	orrs	r2, r3
 80055e8:	7b7b      	ldrb	r3, [r7, #13]
 80055ea:	015b      	lsls	r3, r3, #5
 80055ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f0:	431a      	orrs	r2, r3
 80055f2:	4b31      	ldr	r3, [pc, #196]	; (80056b8 <writecmddata+0x224>)
 80055f4:	619a      	str	r2, [r3, #24]
 80055f6:	7b7b      	ldrb	r3, [r7, #13]
 80055f8:	02db      	lsls	r3, r3, #11
 80055fa:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80055fe:	7b7b      	ldrb	r3, [r7, #13]
 8005600:	025b      	lsls	r3, r3, #9
 8005602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005606:	431a      	orrs	r2, r3
 8005608:	7b7b      	ldrb	r3, [r7, #13]
 800560a:	01db      	lsls	r3, r3, #7
 800560c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005610:	431a      	orrs	r2, r3
 8005612:	7b7b      	ldrb	r3, [r7, #13]
 8005614:	015b      	lsls	r3, r3, #5
 8005616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800561a:	431a      	orrs	r2, r3
 800561c:	4b25      	ldr	r3, [pc, #148]	; (80056b4 <writecmddata+0x220>)
 800561e:	619a      	str	r2, [r3, #24]
 8005620:	2110      	movs	r1, #16
 8005622:	4824      	ldr	r0, [pc, #144]	; (80056b4 <writecmddata+0x220>)
 8005624:	f7ff fe4b 	bl	80052be <PIN_LOW>
 8005628:	2110      	movs	r1, #16
 800562a:	4822      	ldr	r0, [pc, #136]	; (80056b4 <writecmddata+0x220>)
 800562c:	f7ff fe57 	bl	80052de <PIN_HIGH>
 8005630:	4b21      	ldr	r3, [pc, #132]	; (80056b8 <writecmddata+0x224>)
 8005632:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8005636:	619a      	str	r2, [r3, #24]
 8005638:	4b1e      	ldr	r3, [pc, #120]	; (80056b4 <writecmddata+0x220>)
 800563a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800563e:	619a      	str	r2, [r3, #24]
 8005640:	7b3b      	ldrb	r3, [r7, #12]
 8005642:	02db      	lsls	r3, r3, #11
 8005644:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8005648:	7b3b      	ldrb	r3, [r7, #12]
 800564a:	025b      	lsls	r3, r3, #9
 800564c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005650:	431a      	orrs	r2, r3
 8005652:	7b3b      	ldrb	r3, [r7, #12]
 8005654:	01db      	lsls	r3, r3, #7
 8005656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800565a:	431a      	orrs	r2, r3
 800565c:	7b3b      	ldrb	r3, [r7, #12]
 800565e:	015b      	lsls	r3, r3, #5
 8005660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005664:	431a      	orrs	r2, r3
 8005666:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <writecmddata+0x224>)
 8005668:	619a      	str	r2, [r3, #24]
 800566a:	7b3b      	ldrb	r3, [r7, #12]
 800566c:	02db      	lsls	r3, r3, #11
 800566e:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8005672:	7b3b      	ldrb	r3, [r7, #12]
 8005674:	025b      	lsls	r3, r3, #9
 8005676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800567a:	431a      	orrs	r2, r3
 800567c:	7b3b      	ldrb	r3, [r7, #12]
 800567e:	01db      	lsls	r3, r3, #7
 8005680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005684:	431a      	orrs	r2, r3
 8005686:	7b3b      	ldrb	r3, [r7, #12]
 8005688:	015b      	lsls	r3, r3, #5
 800568a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800568e:	431a      	orrs	r2, r3
 8005690:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <writecmddata+0x220>)
 8005692:	619a      	str	r2, [r3, #24]
 8005694:	2110      	movs	r1, #16
 8005696:	4807      	ldr	r0, [pc, #28]	; (80056b4 <writecmddata+0x220>)
 8005698:	f7ff fe11 	bl	80052be <PIN_LOW>
 800569c:	2110      	movs	r1, #16
 800569e:	4805      	ldr	r0, [pc, #20]	; (80056b4 <writecmddata+0x220>)
 80056a0:	f7ff fe1d 	bl	80052de <PIN_HIGH>
    CS_IDLE;
 80056a4:	2140      	movs	r1, #64	; 0x40
 80056a6:	4803      	ldr	r0, [pc, #12]	; (80056b4 <writecmddata+0x220>)
 80056a8:	f7ff fe19 	bl	80052de <PIN_HIGH>
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40020400 	.word	0x40020400
 80056b8:	40020000 	.word	0x40020000

080056bc <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	603a      	str	r2, [r7, #0]
 80056c6:	80fb      	strh	r3, [r7, #6]
 80056c8:	460b      	mov	r3, r1
 80056ca:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 80056cc:	2140      	movs	r1, #64	; 0x40
 80056ce:	48b2      	ldr	r0, [pc, #712]	; (8005998 <WriteCmdParamN+0x2dc>)
 80056d0:	f7ff fdf5 	bl	80052be <PIN_LOW>
    WriteCmd(cmd);
 80056d4:	2120      	movs	r1, #32
 80056d6:	48b0      	ldr	r0, [pc, #704]	; (8005998 <WriteCmdParamN+0x2dc>)
 80056d8:	f7ff fdf1 	bl	80052be <PIN_LOW>
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	73fb      	strb	r3, [r7, #15]
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	73bb      	strb	r3, [r7, #14]
 80056e8:	4bac      	ldr	r3, [pc, #688]	; (800599c <WriteCmdParamN+0x2e0>)
 80056ea:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80056ee:	619a      	str	r2, [r3, #24]
 80056f0:	4ba9      	ldr	r3, [pc, #676]	; (8005998 <WriteCmdParamN+0x2dc>)
 80056f2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80056f6:	619a      	str	r2, [r3, #24]
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	02db      	lsls	r3, r3, #11
 80056fc:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	025b      	lsls	r3, r3, #9
 8005704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005708:	431a      	orrs	r2, r3
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	01db      	lsls	r3, r3, #7
 800570e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005712:	431a      	orrs	r2, r3
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	015b      	lsls	r3, r3, #5
 8005718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571c:	431a      	orrs	r2, r3
 800571e:	4b9f      	ldr	r3, [pc, #636]	; (800599c <WriteCmdParamN+0x2e0>)
 8005720:	619a      	str	r2, [r3, #24]
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	02db      	lsls	r3, r3, #11
 8005726:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	025b      	lsls	r3, r3, #9
 800572e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005732:	431a      	orrs	r2, r3
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	01db      	lsls	r3, r3, #7
 8005738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800573c:	431a      	orrs	r2, r3
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	015b      	lsls	r3, r3, #5
 8005742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005746:	431a      	orrs	r2, r3
 8005748:	4b93      	ldr	r3, [pc, #588]	; (8005998 <WriteCmdParamN+0x2dc>)
 800574a:	619a      	str	r2, [r3, #24]
 800574c:	2110      	movs	r1, #16
 800574e:	4892      	ldr	r0, [pc, #584]	; (8005998 <WriteCmdParamN+0x2dc>)
 8005750:	f7ff fdb5 	bl	80052be <PIN_LOW>
 8005754:	2110      	movs	r1, #16
 8005756:	4890      	ldr	r0, [pc, #576]	; (8005998 <WriteCmdParamN+0x2dc>)
 8005758:	f7ff fdc1 	bl	80052de <PIN_HIGH>
 800575c:	4b8f      	ldr	r3, [pc, #572]	; (800599c <WriteCmdParamN+0x2e0>)
 800575e:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8005762:	619a      	str	r2, [r3, #24]
 8005764:	4b8c      	ldr	r3, [pc, #560]	; (8005998 <WriteCmdParamN+0x2dc>)
 8005766:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800576a:	619a      	str	r2, [r3, #24]
 800576c:	7bbb      	ldrb	r3, [r7, #14]
 800576e:	02db      	lsls	r3, r3, #11
 8005770:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	025b      	lsls	r3, r3, #9
 8005778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577c:	431a      	orrs	r2, r3
 800577e:	7bbb      	ldrb	r3, [r7, #14]
 8005780:	01db      	lsls	r3, r3, #7
 8005782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005786:	431a      	orrs	r2, r3
 8005788:	7bbb      	ldrb	r3, [r7, #14]
 800578a:	015b      	lsls	r3, r3, #5
 800578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005790:	431a      	orrs	r2, r3
 8005792:	4b82      	ldr	r3, [pc, #520]	; (800599c <WriteCmdParamN+0x2e0>)
 8005794:	619a      	str	r2, [r3, #24]
 8005796:	7bbb      	ldrb	r3, [r7, #14]
 8005798:	02db      	lsls	r3, r3, #11
 800579a:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800579e:	7bbb      	ldrb	r3, [r7, #14]
 80057a0:	025b      	lsls	r3, r3, #9
 80057a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a6:	431a      	orrs	r2, r3
 80057a8:	7bbb      	ldrb	r3, [r7, #14]
 80057aa:	01db      	lsls	r3, r3, #7
 80057ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057b0:	431a      	orrs	r2, r3
 80057b2:	7bbb      	ldrb	r3, [r7, #14]
 80057b4:	015b      	lsls	r3, r3, #5
 80057b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ba:	431a      	orrs	r2, r3
 80057bc:	4b76      	ldr	r3, [pc, #472]	; (8005998 <WriteCmdParamN+0x2dc>)
 80057be:	619a      	str	r2, [r3, #24]
 80057c0:	2110      	movs	r1, #16
 80057c2:	4875      	ldr	r0, [pc, #468]	; (8005998 <WriteCmdParamN+0x2dc>)
 80057c4:	f7ff fd7b 	bl	80052be <PIN_LOW>
 80057c8:	2110      	movs	r1, #16
 80057ca:	4873      	ldr	r0, [pc, #460]	; (8005998 <WriteCmdParamN+0x2dc>)
 80057cc:	f7ff fd87 	bl	80052de <PIN_HIGH>
 80057d0:	2120      	movs	r1, #32
 80057d2:	4871      	ldr	r0, [pc, #452]	; (8005998 <WriteCmdParamN+0x2dc>)
 80057d4:	f7ff fd83 	bl	80052de <PIN_HIGH>
    while (N-- > 0) {
 80057d8:	e0cd      	b.n	8005976 <WriteCmdParamN+0x2ba>
        uint8_t u8 = *block++;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	603a      	str	r2, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	737b      	strb	r3, [r7, #13]
        write8(u8);
 80057e4:	4b6d      	ldr	r3, [pc, #436]	; (800599c <WriteCmdParamN+0x2e0>)
 80057e6:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80057ea:	619a      	str	r2, [r3, #24]
 80057ec:	4b6a      	ldr	r3, [pc, #424]	; (8005998 <WriteCmdParamN+0x2dc>)
 80057ee:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80057f2:	619a      	str	r2, [r3, #24]
 80057f4:	7b7b      	ldrb	r3, [r7, #13]
 80057f6:	02db      	lsls	r3, r3, #11
 80057f8:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80057fc:	7b7b      	ldrb	r3, [r7, #13]
 80057fe:	025b      	lsls	r3, r3, #9
 8005800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005804:	431a      	orrs	r2, r3
 8005806:	7b7b      	ldrb	r3, [r7, #13]
 8005808:	01db      	lsls	r3, r3, #7
 800580a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800580e:	431a      	orrs	r2, r3
 8005810:	7b7b      	ldrb	r3, [r7, #13]
 8005812:	015b      	lsls	r3, r3, #5
 8005814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005818:	431a      	orrs	r2, r3
 800581a:	4b60      	ldr	r3, [pc, #384]	; (800599c <WriteCmdParamN+0x2e0>)
 800581c:	619a      	str	r2, [r3, #24]
 800581e:	7b7b      	ldrb	r3, [r7, #13]
 8005820:	02db      	lsls	r3, r3, #11
 8005822:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8005826:	7b7b      	ldrb	r3, [r7, #13]
 8005828:	025b      	lsls	r3, r3, #9
 800582a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800582e:	431a      	orrs	r2, r3
 8005830:	7b7b      	ldrb	r3, [r7, #13]
 8005832:	01db      	lsls	r3, r3, #7
 8005834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005838:	431a      	orrs	r2, r3
 800583a:	7b7b      	ldrb	r3, [r7, #13]
 800583c:	015b      	lsls	r3, r3, #5
 800583e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005842:	431a      	orrs	r2, r3
 8005844:	4b54      	ldr	r3, [pc, #336]	; (8005998 <WriteCmdParamN+0x2dc>)
 8005846:	619a      	str	r2, [r3, #24]
 8005848:	2110      	movs	r1, #16
 800584a:	4853      	ldr	r0, [pc, #332]	; (8005998 <WriteCmdParamN+0x2dc>)
 800584c:	f7ff fd37 	bl	80052be <PIN_LOW>
 8005850:	2110      	movs	r1, #16
 8005852:	4851      	ldr	r0, [pc, #324]	; (8005998 <WriteCmdParamN+0x2dc>)
 8005854:	f7ff fd43 	bl	80052de <PIN_HIGH>
        if (N && is8347) {
 8005858:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 808a 	beq.w	8005976 <WriteCmdParamN+0x2ba>
 8005862:	4b4f      	ldr	r3, [pc, #316]	; (80059a0 <WriteCmdParamN+0x2e4>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8085 	beq.w	8005976 <WriteCmdParamN+0x2ba>
            cmd++;
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	3301      	adds	r3, #1
 8005870:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8005872:	2120      	movs	r1, #32
 8005874:	4848      	ldr	r0, [pc, #288]	; (8005998 <WriteCmdParamN+0x2dc>)
 8005876:	f7ff fd22 	bl	80052be <PIN_LOW>
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	0a1b      	lsrs	r3, r3, #8
 800587e:	b29b      	uxth	r3, r3
 8005880:	733b      	strb	r3, [r7, #12]
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	72fb      	strb	r3, [r7, #11]
 8005886:	4b45      	ldr	r3, [pc, #276]	; (800599c <WriteCmdParamN+0x2e0>)
 8005888:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800588c:	619a      	str	r2, [r3, #24]
 800588e:	4b42      	ldr	r3, [pc, #264]	; (8005998 <WriteCmdParamN+0x2dc>)
 8005890:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8005894:	619a      	str	r2, [r3, #24]
 8005896:	7b3b      	ldrb	r3, [r7, #12]
 8005898:	02db      	lsls	r3, r3, #11
 800589a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800589e:	7b3b      	ldrb	r3, [r7, #12]
 80058a0:	025b      	lsls	r3, r3, #9
 80058a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a6:	431a      	orrs	r2, r3
 80058a8:	7b3b      	ldrb	r3, [r7, #12]
 80058aa:	01db      	lsls	r3, r3, #7
 80058ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b0:	431a      	orrs	r2, r3
 80058b2:	7b3b      	ldrb	r3, [r7, #12]
 80058b4:	015b      	lsls	r3, r3, #5
 80058b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ba:	431a      	orrs	r2, r3
 80058bc:	4b37      	ldr	r3, [pc, #220]	; (800599c <WriteCmdParamN+0x2e0>)
 80058be:	619a      	str	r2, [r3, #24]
 80058c0:	7b3b      	ldrb	r3, [r7, #12]
 80058c2:	02db      	lsls	r3, r3, #11
 80058c4:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80058c8:	7b3b      	ldrb	r3, [r7, #12]
 80058ca:	025b      	lsls	r3, r3, #9
 80058cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058d0:	431a      	orrs	r2, r3
 80058d2:	7b3b      	ldrb	r3, [r7, #12]
 80058d4:	01db      	lsls	r3, r3, #7
 80058d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058da:	431a      	orrs	r2, r3
 80058dc:	7b3b      	ldrb	r3, [r7, #12]
 80058de:	015b      	lsls	r3, r3, #5
 80058e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058e4:	431a      	orrs	r2, r3
 80058e6:	4b2c      	ldr	r3, [pc, #176]	; (8005998 <WriteCmdParamN+0x2dc>)
 80058e8:	619a      	str	r2, [r3, #24]
 80058ea:	2110      	movs	r1, #16
 80058ec:	482a      	ldr	r0, [pc, #168]	; (8005998 <WriteCmdParamN+0x2dc>)
 80058ee:	f7ff fce6 	bl	80052be <PIN_LOW>
 80058f2:	2110      	movs	r1, #16
 80058f4:	4828      	ldr	r0, [pc, #160]	; (8005998 <WriteCmdParamN+0x2dc>)
 80058f6:	f7ff fcf2 	bl	80052de <PIN_HIGH>
 80058fa:	4b28      	ldr	r3, [pc, #160]	; (800599c <WriteCmdParamN+0x2e0>)
 80058fc:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8005900:	619a      	str	r2, [r3, #24]
 8005902:	4b25      	ldr	r3, [pc, #148]	; (8005998 <WriteCmdParamN+0x2dc>)
 8005904:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8005908:	619a      	str	r2, [r3, #24]
 800590a:	7afb      	ldrb	r3, [r7, #11]
 800590c:	02db      	lsls	r3, r3, #11
 800590e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8005912:	7afb      	ldrb	r3, [r7, #11]
 8005914:	025b      	lsls	r3, r3, #9
 8005916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591a:	431a      	orrs	r2, r3
 800591c:	7afb      	ldrb	r3, [r7, #11]
 800591e:	01db      	lsls	r3, r3, #7
 8005920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005924:	431a      	orrs	r2, r3
 8005926:	7afb      	ldrb	r3, [r7, #11]
 8005928:	015b      	lsls	r3, r3, #5
 800592a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592e:	431a      	orrs	r2, r3
 8005930:	4b1a      	ldr	r3, [pc, #104]	; (800599c <WriteCmdParamN+0x2e0>)
 8005932:	619a      	str	r2, [r3, #24]
 8005934:	7afb      	ldrb	r3, [r7, #11]
 8005936:	02db      	lsls	r3, r3, #11
 8005938:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800593c:	7afb      	ldrb	r3, [r7, #11]
 800593e:	025b      	lsls	r3, r3, #9
 8005940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005944:	431a      	orrs	r2, r3
 8005946:	7afb      	ldrb	r3, [r7, #11]
 8005948:	01db      	lsls	r3, r3, #7
 800594a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800594e:	431a      	orrs	r2, r3
 8005950:	7afb      	ldrb	r3, [r7, #11]
 8005952:	015b      	lsls	r3, r3, #5
 8005954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005958:	431a      	orrs	r2, r3
 800595a:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <WriteCmdParamN+0x2dc>)
 800595c:	619a      	str	r2, [r3, #24]
 800595e:	2110      	movs	r1, #16
 8005960:	480d      	ldr	r0, [pc, #52]	; (8005998 <WriteCmdParamN+0x2dc>)
 8005962:	f7ff fcac 	bl	80052be <PIN_LOW>
 8005966:	2110      	movs	r1, #16
 8005968:	480b      	ldr	r0, [pc, #44]	; (8005998 <WriteCmdParamN+0x2dc>)
 800596a:	f7ff fcb8 	bl	80052de <PIN_HIGH>
 800596e:	2120      	movs	r1, #32
 8005970:	4809      	ldr	r0, [pc, #36]	; (8005998 <WriteCmdParamN+0x2dc>)
 8005972:	f7ff fcb4 	bl	80052de <PIN_HIGH>
    while (N-- > 0) {
 8005976:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800597a:	b2da      	uxtb	r2, r3
 800597c:	3a01      	subs	r2, #1
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	717a      	strb	r2, [r7, #5]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f73f af29 	bgt.w	80057da <WriteCmdParamN+0x11e>
        }
    }
    CS_IDLE;
 8005988:	2140      	movs	r1, #64	; 0x40
 800598a:	4803      	ldr	r0, [pc, #12]	; (8005998 <WriteCmdParamN+0x2dc>)
 800598c:	f7ff fca7 	bl	80052de <PIN_HIGH>
}
 8005990:	bf00      	nop
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40020400 	.word	0x40020400
 800599c:	40020000 	.word	0x40020000
 80059a0:	20004235 	.word	0x20004235

080059a4 <reset>:
}



void reset(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
    done_reset = 1;
 80059a8:	4b21      	ldr	r3, [pc, #132]	; (8005a30 <reset+0x8c>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 80059ae:	f7ff fd41 	bl	8005434 <setWriteDir>
    CTL_INIT();
 80059b2:	2108      	movs	r1, #8
 80059b4:	481f      	ldr	r0, [pc, #124]	; (8005a34 <reset+0x90>)
 80059b6:	f7ff fcb8 	bl	800532a <PIN_OUTPUT>
 80059ba:	2110      	movs	r1, #16
 80059bc:	481d      	ldr	r0, [pc, #116]	; (8005a34 <reset+0x90>)
 80059be:	f7ff fcb4 	bl	800532a <PIN_OUTPUT>
 80059c2:	2120      	movs	r1, #32
 80059c4:	481b      	ldr	r0, [pc, #108]	; (8005a34 <reset+0x90>)
 80059c6:	f7ff fcb0 	bl	800532a <PIN_OUTPUT>
 80059ca:	2140      	movs	r1, #64	; 0x40
 80059cc:	4819      	ldr	r0, [pc, #100]	; (8005a34 <reset+0x90>)
 80059ce:	f7ff fcac 	bl	800532a <PIN_OUTPUT>
 80059d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059d6:	4818      	ldr	r0, [pc, #96]	; (8005a38 <reset+0x94>)
 80059d8:	f7ff fca7 	bl	800532a <PIN_OUTPUT>
    CS_IDLE;
 80059dc:	2140      	movs	r1, #64	; 0x40
 80059de:	4815      	ldr	r0, [pc, #84]	; (8005a34 <reset+0x90>)
 80059e0:	f7ff fc7d 	bl	80052de <PIN_HIGH>
    RD_IDLE;
 80059e4:	2108      	movs	r1, #8
 80059e6:	4813      	ldr	r0, [pc, #76]	; (8005a34 <reset+0x90>)
 80059e8:	f7ff fc79 	bl	80052de <PIN_HIGH>
    WR_IDLE;
 80059ec:	2110      	movs	r1, #16
 80059ee:	4811      	ldr	r0, [pc, #68]	; (8005a34 <reset+0x90>)
 80059f0:	f7ff fc75 	bl	80052de <PIN_HIGH>
    RESET_IDLE;
 80059f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059f8:	480f      	ldr	r0, [pc, #60]	; (8005a38 <reset+0x94>)
 80059fa:	f7ff fc70 	bl	80052de <PIN_HIGH>
    delay(50);
 80059fe:	2032      	movs	r0, #50	; 0x32
 8005a00:	f7ff fcd0 	bl	80053a4 <delay>
    RESET_ACTIVE;
 8005a04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a08:	480b      	ldr	r0, [pc, #44]	; (8005a38 <reset+0x94>)
 8005a0a:	f7ff fc58 	bl	80052be <PIN_LOW>
    delay(100);
 8005a0e:	2064      	movs	r0, #100	; 0x64
 8005a10:	f7ff fcc8 	bl	80053a4 <delay>
    RESET_IDLE;
 8005a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a18:	4807      	ldr	r0, [pc, #28]	; (8005a38 <reset+0x94>)
 8005a1a:	f7ff fc60 	bl	80052de <PIN_HIGH>
    delay(100);
 8005a1e:	2064      	movs	r0, #100	; 0x64
 8005a20:	f7ff fcc0 	bl	80053a4 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8005a24:	2100      	movs	r1, #0
 8005a26:	20b0      	movs	r0, #176	; 0xb0
 8005a28:	f7ff fc97 	bl	800535a <WriteCmdData>
}
 8005a2c:	bf00      	nop
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20004234 	.word	0x20004234
 8005a34:	40020400 	.word	0x40020400
 8005a38:	40020000 	.word	0x40020000

08005a3c <read16bits>:

static uint16_t read16bits(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8005a42:	2108      	movs	r1, #8
 8005a44:	4873      	ldr	r0, [pc, #460]	; (8005c14 <read16bits+0x1d8>)
 8005a46:	f7ff fc4a 	bl	80052de <PIN_HIGH>
 8005a4a:	2108      	movs	r1, #8
 8005a4c:	4871      	ldr	r0, [pc, #452]	; (8005c14 <read16bits+0x1d8>)
 8005a4e:	f7ff fc36 	bl	80052be <PIN_LOW>
 8005a52:	2108      	movs	r1, #8
 8005a54:	486f      	ldr	r0, [pc, #444]	; (8005c14 <read16bits+0x1d8>)
 8005a56:	f7ff fc32 	bl	80052be <PIN_LOW>
 8005a5a:	2108      	movs	r1, #8
 8005a5c:	486d      	ldr	r0, [pc, #436]	; (8005c14 <read16bits+0x1d8>)
 8005a5e:	f7ff fc2e 	bl	80052be <PIN_LOW>
 8005a62:	2108      	movs	r1, #8
 8005a64:	486b      	ldr	r0, [pc, #428]	; (8005c14 <read16bits+0x1d8>)
 8005a66:	f7ff fc2a 	bl	80052be <PIN_LOW>
 8005a6a:	2108      	movs	r1, #8
 8005a6c:	4869      	ldr	r0, [pc, #420]	; (8005c14 <read16bits+0x1d8>)
 8005a6e:	f7ff fc26 	bl	80052be <PIN_LOW>
 8005a72:	2108      	movs	r1, #8
 8005a74:	4867      	ldr	r0, [pc, #412]	; (8005c14 <read16bits+0x1d8>)
 8005a76:	f7ff fc22 	bl	80052be <PIN_LOW>
 8005a7a:	2108      	movs	r1, #8
 8005a7c:	4865      	ldr	r0, [pc, #404]	; (8005c14 <read16bits+0x1d8>)
 8005a7e:	f7ff fc1e 	bl	80052be <PIN_LOW>
 8005a82:	4b65      	ldr	r3, [pc, #404]	; (8005c18 <read16bits+0x1dc>)
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	0adb      	lsrs	r3, r3, #11
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	4b61      	ldr	r3, [pc, #388]	; (8005c18 <read16bits+0x1dc>)
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	0a5b      	lsrs	r3, r3, #9
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	4b5d      	ldr	r3, [pc, #372]	; (8005c18 <read16bits+0x1dc>)
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	09db      	lsrs	r3, r3, #7
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	4b58      	ldr	r3, [pc, #352]	; (8005c18 <read16bits+0x1dc>)
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	4b53      	ldr	r3, [pc, #332]	; (8005c14 <read16bits+0x1d8>)
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	0adb      	lsrs	r3, r3, #11
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f003 0310 	and.w	r3, r3, #16
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	4b4e      	ldr	r3, [pc, #312]	; (8005c14 <read16bits+0x1d8>)
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	0a5b      	lsrs	r3, r3, #9
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	4b4a      	ldr	r3, [pc, #296]	; (8005c14 <read16bits+0x1d8>)
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	09db      	lsrs	r3, r3, #7
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4313      	orrs	r3, r2
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	4b45      	ldr	r3, [pc, #276]	; (8005c14 <read16bits+0x1d8>)
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	80fb      	strh	r3, [r7, #6]
 8005b0e:	2108      	movs	r1, #8
 8005b10:	4840      	ldr	r0, [pc, #256]	; (8005c14 <read16bits+0x1d8>)
 8005b12:	f7ff fbe4 	bl	80052de <PIN_HIGH>
 8005b16:	2108      	movs	r1, #8
 8005b18:	483e      	ldr	r0, [pc, #248]	; (8005c14 <read16bits+0x1d8>)
 8005b1a:	f7ff fbe0 	bl	80052de <PIN_HIGH>
    READ_8(lo);
 8005b1e:	2108      	movs	r1, #8
 8005b20:	483c      	ldr	r0, [pc, #240]	; (8005c14 <read16bits+0x1d8>)
 8005b22:	f7ff fbdc 	bl	80052de <PIN_HIGH>
 8005b26:	2108      	movs	r1, #8
 8005b28:	483a      	ldr	r0, [pc, #232]	; (8005c14 <read16bits+0x1d8>)
 8005b2a:	f7ff fbc8 	bl	80052be <PIN_LOW>
 8005b2e:	2108      	movs	r1, #8
 8005b30:	4838      	ldr	r0, [pc, #224]	; (8005c14 <read16bits+0x1d8>)
 8005b32:	f7ff fbc4 	bl	80052be <PIN_LOW>
 8005b36:	2108      	movs	r1, #8
 8005b38:	4836      	ldr	r0, [pc, #216]	; (8005c14 <read16bits+0x1d8>)
 8005b3a:	f7ff fbc0 	bl	80052be <PIN_LOW>
 8005b3e:	2108      	movs	r1, #8
 8005b40:	4834      	ldr	r0, [pc, #208]	; (8005c14 <read16bits+0x1d8>)
 8005b42:	f7ff fbbc 	bl	80052be <PIN_LOW>
 8005b46:	2108      	movs	r1, #8
 8005b48:	4832      	ldr	r0, [pc, #200]	; (8005c14 <read16bits+0x1d8>)
 8005b4a:	f7ff fbb8 	bl	80052be <PIN_LOW>
 8005b4e:	2108      	movs	r1, #8
 8005b50:	4830      	ldr	r0, [pc, #192]	; (8005c14 <read16bits+0x1d8>)
 8005b52:	f7ff fbb4 	bl	80052be <PIN_LOW>
 8005b56:	2108      	movs	r1, #8
 8005b58:	482e      	ldr	r0, [pc, #184]	; (8005c14 <read16bits+0x1d8>)
 8005b5a:	f7ff fbb0 	bl	80052be <PIN_LOW>
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	; (8005c18 <read16bits+0x1dc>)
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	0adb      	lsrs	r3, r3, #11
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	4b2a      	ldr	r3, [pc, #168]	; (8005c18 <read16bits+0x1dc>)
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	0a5b      	lsrs	r3, r3, #9
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	4b26      	ldr	r3, [pc, #152]	; (8005c18 <read16bits+0x1dc>)
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	09db      	lsrs	r3, r3, #7
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	4b21      	ldr	r3, [pc, #132]	; (8005c18 <read16bits+0x1dc>)
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	4b1c      	ldr	r3, [pc, #112]	; (8005c14 <read16bits+0x1d8>)
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	0adb      	lsrs	r3, r3, #11
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	4b17      	ldr	r3, [pc, #92]	; (8005c14 <read16bits+0x1d8>)
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	0a5b      	lsrs	r3, r3, #9
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <read16bits+0x1d8>)
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	09db      	lsrs	r3, r3, #7
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <read16bits+0x1d8>)
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	095b      	lsrs	r3, r3, #5
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	4313      	orrs	r3, r2
 8005be8:	717b      	strb	r3, [r7, #5]
 8005bea:	2108      	movs	r1, #8
 8005bec:	4809      	ldr	r0, [pc, #36]	; (8005c14 <read16bits+0x1d8>)
 8005bee:	f7ff fb76 	bl	80052de <PIN_HIGH>
 8005bf2:	2108      	movs	r1, #8
 8005bf4:	4807      	ldr	r0, [pc, #28]	; (8005c14 <read16bits+0x1d8>)
 8005bf6:	f7ff fb72 	bl	80052de <PIN_HIGH>
    return (ret << 8) | lo;
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	b21a      	sxth	r2, r3
 8005c00:	797b      	ldrb	r3, [r7, #5]
 8005c02:	b21b      	sxth	r3, r3
 8005c04:	4313      	orrs	r3, r2
 8005c06:	b21b      	sxth	r3, r3
 8005c08:	b29b      	uxth	r3, r3
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40020400 	.word	0x40020400
 8005c18:	40020000 	.word	0x40020000

08005c1c <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	460a      	mov	r2, r1
 8005c26:	80fb      	strh	r3, [r7, #6]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8005c2c:	4b55      	ldr	r3, [pc, #340]	; (8005d84 <readReg+0x168>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <readReg+0x1c>
        reset();
 8005c34:	f7ff feb6 	bl	80059a4 <reset>
    CS_ACTIVE;
 8005c38:	2140      	movs	r1, #64	; 0x40
 8005c3a:	4853      	ldr	r0, [pc, #332]	; (8005d88 <readReg+0x16c>)
 8005c3c:	f7ff fb3f 	bl	80052be <PIN_LOW>
    WriteCmd(reg);
 8005c40:	2120      	movs	r1, #32
 8005c42:	4851      	ldr	r0, [pc, #324]	; (8005d88 <readReg+0x16c>)
 8005c44:	f7ff fb3b 	bl	80052be <PIN_LOW>
 8005c48:	88fb      	ldrh	r3, [r7, #6]
 8005c4a:	0a1b      	lsrs	r3, r3, #8
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	73fb      	strb	r3, [r7, #15]
 8005c50:	88fb      	ldrh	r3, [r7, #6]
 8005c52:	73bb      	strb	r3, [r7, #14]
 8005c54:	4b4d      	ldr	r3, [pc, #308]	; (8005d8c <readReg+0x170>)
 8005c56:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8005c5a:	619a      	str	r2, [r3, #24]
 8005c5c:	4b4a      	ldr	r3, [pc, #296]	; (8005d88 <readReg+0x16c>)
 8005c5e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8005c62:	619a      	str	r2, [r3, #24]
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	02db      	lsls	r3, r3, #11
 8005c68:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	025b      	lsls	r3, r3, #9
 8005c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c74:	431a      	orrs	r2, r3
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	01db      	lsls	r3, r3, #7
 8005c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	015b      	lsls	r3, r3, #5
 8005c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	4b40      	ldr	r3, [pc, #256]	; (8005d8c <readReg+0x170>)
 8005c8c:	619a      	str	r2, [r3, #24]
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	02db      	lsls	r3, r3, #11
 8005c92:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	025b      	lsls	r3, r3, #9
 8005c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	01db      	lsls	r3, r3, #7
 8005ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	015b      	lsls	r3, r3, #5
 8005cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	4b34      	ldr	r3, [pc, #208]	; (8005d88 <readReg+0x16c>)
 8005cb6:	619a      	str	r2, [r3, #24]
 8005cb8:	2110      	movs	r1, #16
 8005cba:	4833      	ldr	r0, [pc, #204]	; (8005d88 <readReg+0x16c>)
 8005cbc:	f7ff faff 	bl	80052be <PIN_LOW>
 8005cc0:	2110      	movs	r1, #16
 8005cc2:	4831      	ldr	r0, [pc, #196]	; (8005d88 <readReg+0x16c>)
 8005cc4:	f7ff fb0b 	bl	80052de <PIN_HIGH>
 8005cc8:	4b30      	ldr	r3, [pc, #192]	; (8005d8c <readReg+0x170>)
 8005cca:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8005cce:	619a      	str	r2, [r3, #24]
 8005cd0:	4b2d      	ldr	r3, [pc, #180]	; (8005d88 <readReg+0x16c>)
 8005cd2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8005cd6:	619a      	str	r2, [r3, #24]
 8005cd8:	7bbb      	ldrb	r3, [r7, #14]
 8005cda:	02db      	lsls	r3, r3, #11
 8005cdc:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8005ce0:	7bbb      	ldrb	r3, [r7, #14]
 8005ce2:	025b      	lsls	r3, r3, #9
 8005ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	7bbb      	ldrb	r3, [r7, #14]
 8005cec:	01db      	lsls	r3, r3, #7
 8005cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	7bbb      	ldrb	r3, [r7, #14]
 8005cf6:	015b      	lsls	r3, r3, #5
 8005cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	4b23      	ldr	r3, [pc, #140]	; (8005d8c <readReg+0x170>)
 8005d00:	619a      	str	r2, [r3, #24]
 8005d02:	7bbb      	ldrb	r3, [r7, #14]
 8005d04:	02db      	lsls	r3, r3, #11
 8005d06:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8005d0a:	7bbb      	ldrb	r3, [r7, #14]
 8005d0c:	025b      	lsls	r3, r3, #9
 8005d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d12:	431a      	orrs	r2, r3
 8005d14:	7bbb      	ldrb	r3, [r7, #14]
 8005d16:	01db      	lsls	r3, r3, #7
 8005d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	7bbb      	ldrb	r3, [r7, #14]
 8005d20:	015b      	lsls	r3, r3, #5
 8005d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d26:	431a      	orrs	r2, r3
 8005d28:	4b17      	ldr	r3, [pc, #92]	; (8005d88 <readReg+0x16c>)
 8005d2a:	619a      	str	r2, [r3, #24]
 8005d2c:	2110      	movs	r1, #16
 8005d2e:	4816      	ldr	r0, [pc, #88]	; (8005d88 <readReg+0x16c>)
 8005d30:	f7ff fac5 	bl	80052be <PIN_LOW>
 8005d34:	2110      	movs	r1, #16
 8005d36:	4814      	ldr	r0, [pc, #80]	; (8005d88 <readReg+0x16c>)
 8005d38:	f7ff fad1 	bl	80052de <PIN_HIGH>
 8005d3c:	2120      	movs	r1, #32
 8005d3e:	4812      	ldr	r0, [pc, #72]	; (8005d88 <readReg+0x16c>)
 8005d40:	f7ff facd 	bl	80052de <PIN_HIGH>
    setReadDir();
 8005d44:	f7ff fb46 	bl	80053d4 <setReadDir>
    delay(1);    //1us should be adequate
 8005d48:	2001      	movs	r0, #1
 8005d4a:	f7ff fb2b 	bl	80053a4 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8005d4e:	f7ff fe75 	bl	8005a3c <read16bits>
 8005d52:	4603      	mov	r3, r0
 8005d54:	81bb      	strh	r3, [r7, #12]
 8005d56:	797b      	ldrb	r3, [r7, #5]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	717b      	strb	r3, [r7, #5]
 8005d5e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	daf3      	bge.n	8005d4e <readReg+0x132>
    RD_IDLE;
 8005d66:	2108      	movs	r1, #8
 8005d68:	4807      	ldr	r0, [pc, #28]	; (8005d88 <readReg+0x16c>)
 8005d6a:	f7ff fab8 	bl	80052de <PIN_HIGH>
    CS_IDLE;
 8005d6e:	2140      	movs	r1, #64	; 0x40
 8005d70:	4805      	ldr	r0, [pc, #20]	; (8005d88 <readReg+0x16c>)
 8005d72:	f7ff fab4 	bl	80052de <PIN_HIGH>
    setWriteDir();
 8005d76:	f7ff fb5d 	bl	8005434 <setWriteDir>
    return ret;
 8005d7a:	89bb      	ldrh	r3, [r7, #12]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20004234 	.word	0x20004234
 8005d88:	40020400 	.word	0x40020400
 8005d8c:	40020000 	.word	0x40020000

08005d90 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	4603      	mov	r3, r0
 8005d98:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8005d9a:	88fb      	ldrh	r3, [r7, #6]
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff ff3c 	bl	8005c1c <readReg>
 8005da4:	4603      	mov	r3, r0
 8005da6:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	2101      	movs	r1, #1
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff ff35 	bl	8005c1c <readReg>
 8005db2:	4603      	mov	r3, r0
 8005db4:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8005db6:	89fb      	ldrh	r3, [r7, #14]
 8005db8:	041a      	lsls	r2, r3, #16
 8005dba:	89bb      	ldrh	r3, [r7, #12]
 8005dbc:	4313      	orrs	r3, r2
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	4603      	mov	r3, r0
 8005dce:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8005dd0:	88fb      	ldrh	r3, [r7, #6]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff ff21 	bl	8005c1c <readReg>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	2101      	movs	r1, #1
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff ff1a 	bl	8005c1c <readReg>
 8005de8:	4603      	mov	r3, r0
 8005dea:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8005dec:	88fb      	ldrh	r3, [r7, #6]
 8005dee:	2102      	movs	r1, #2
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff ff13 	bl	8005c1c <readReg>
 8005df6:	4603      	mov	r3, r0
 8005df8:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8005dfa:	89fb      	ldrh	r3, [r7, #14]
 8005dfc:	061b      	lsls	r3, r3, #24
 8005dfe:	89ba      	ldrh	r2, [r7, #12]
 8005e00:	0212      	lsls	r2, r2, #8
 8005e02:	4313      	orrs	r3, r2
 8005e04:	897a      	ldrh	r2, [r7, #10]
 8005e06:	0a12      	lsrs	r2, r2, #8
 8005e08:	b292      	uxth	r2, r2
 8005e0a:	4313      	orrs	r3, r2
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <readID>:




uint16_t readID(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	f7ff fefd 	bl	8005c1c <readReg>
 8005e22:	4603      	mov	r3, r0
 8005e24:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8005e26:	89fb      	ldrh	r3, [r7, #14]
 8005e28:	f245 4208 	movw	r2, #21512	; 0x5408
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d102      	bne.n	8005e36 <readID+0x22>
        return 0x5408;
 8005e30:	f245 4308 	movw	r3, #21512	; 0x5408
 8005e34:	e128      	b.n	8006088 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8005e36:	89fb      	ldrh	r3, [r7, #14]
 8005e38:	f245 4220 	movw	r2, #21536	; 0x5420
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d102      	bne.n	8005e46 <readID+0x32>
        return 0x5420;
 8005e40:	f245 4320 	movw	r3, #21536	; 0x5420
 8005e44:	e120      	b.n	8006088 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8005e46:	89fb      	ldrh	r3, [r7, #14]
 8005e48:	f648 1289 	movw	r2, #35209	; 0x8989
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d102      	bne.n	8005e56 <readID+0x42>
        return 0x1289;
 8005e50:	f241 2389 	movw	r3, #4745	; 0x1289
 8005e54:	e118      	b.n	8006088 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8005e56:	2100      	movs	r1, #0
 8005e58:	2067      	movs	r0, #103	; 0x67
 8005e5a:	f7ff fedf 	bl	8005c1c <readReg>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8005e62:	89fb      	ldrh	r3, [r7, #14]
 8005e64:	f244 7247 	movw	r2, #18247	; 0x4747
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d102      	bne.n	8005e72 <readID+0x5e>
        return 0x8347;
 8005e6c:	f248 3347 	movw	r3, #33607	; 0x8347
 8005e70:	e10a      	b.n	8006088 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8005e72:	20a1      	movs	r0, #161	; 0xa1
 8005e74:	f7ff ff8c 	bl	8005d90 <readReg32>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8005e7c:	89fb      	ldrh	r3, [r7, #14]
 8005e7e:	f246 1201 	movw	r2, #24833	; 0x6101
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d102      	bne.n	8005e8c <readID+0x78>
        return 0x1963;
 8005e86:	f641 1363 	movw	r3, #6499	; 0x1963
 8005e8a:	e0fd      	b.n	8006088 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8005e8c:	89fb      	ldrh	r3, [r7, #14]
 8005e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d102      	bne.n	8005e9c <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8005e96:	f241 5326 	movw	r3, #5414	; 0x1526
 8005e9a:	e0f5      	b.n	8006088 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8005e9c:	20bf      	movs	r0, #191	; 0xbf
 8005e9e:	f7ff ff92 	bl	8005dc6 <readReg40>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8005ea6:	89fb      	ldrh	r3, [r7, #14]
 8005ea8:	f248 3257 	movw	r2, #33623	; 0x8357
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d102      	bne.n	8005eb6 <readID+0xa2>
        return 0x8357;
 8005eb0:	f248 3357 	movw	r3, #33623	; 0x8357
 8005eb4:	e0e8      	b.n	8006088 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8005eb6:	89fb      	ldrh	r3, [r7, #14]
 8005eb8:	f249 4281 	movw	r2, #38017	; 0x9481
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d102      	bne.n	8005ec6 <readID+0xb2>
        return 0x9481;
 8005ec0:	f249 4381 	movw	r3, #38017	; 0x9481
 8005ec4:	e0e0      	b.n	8006088 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8005ec6:	89fb      	ldrh	r3, [r7, #14]
 8005ec8:	f241 5211 	movw	r2, #5393	; 0x1511
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d102      	bne.n	8005ed6 <readID+0xc2>
        return 0x1511;
 8005ed0:	f241 5311 	movw	r3, #5393	; 0x1511
 8005ed4:	e0d8      	b.n	8006088 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8005ed6:	89fb      	ldrh	r3, [r7, #14]
 8005ed8:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8005edc:	d102      	bne.n	8005ee4 <readID+0xd0>
        return 0x1520;
 8005ede:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 8005ee2:	e0d1      	b.n	8006088 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8005ee4:	89fb      	ldrh	r3, [r7, #14]
 8005ee6:	f241 5226 	movw	r2, #5414	; 0x1526
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d102      	bne.n	8005ef4 <readID+0xe0>
        return 0x1526;
 8005eee:	f241 5326 	movw	r3, #5414	; 0x1526
 8005ef2:	e0c9      	b.n	8006088 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8005ef4:	89fb      	ldrh	r3, [r7, #14]
 8005ef6:	f241 5281 	movw	r2, #5505	; 0x1581
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d102      	bne.n	8005f04 <readID+0xf0>
        return 0x1581;
 8005efe:	f241 5381 	movw	r3, #5505	; 0x1581
 8005f02:	e0c1      	b.n	8006088 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8005f04:	89fb      	ldrh	r3, [r7, #14]
 8005f06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f0a:	d102      	bne.n	8005f12 <readID+0xfe>
        return 0x6814;
 8005f0c:	f646 0314 	movw	r3, #26644	; 0x6814
 8005f10:	e0ba      	b.n	8006088 <readID+0x274>
    ret = readReg32(0xD4);
 8005f12:	20d4      	movs	r0, #212	; 0xd4
 8005f14:	f7ff ff3c 	bl	8005d90 <readReg32>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8005f1c:	89fb      	ldrh	r3, [r7, #14]
 8005f1e:	f245 3210 	movw	r2, #21264	; 0x5310
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d102      	bne.n	8005f2c <readID+0x118>
        return 0x5310;
 8005f26:	f245 3310 	movw	r3, #21264	; 0x5310
 8005f2a:	e0ad      	b.n	8006088 <readID+0x274>
    ret = readReg32(0xD7);
 8005f2c:	20d7      	movs	r0, #215	; 0xd7
 8005f2e:	f7ff ff2f 	bl	8005d90 <readReg32>
 8005f32:	4603      	mov	r3, r0
 8005f34:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8005f36:	89fb      	ldrh	r3, [r7, #14]
 8005f38:	f248 0231 	movw	r2, #32817	; 0x8031
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d102      	bne.n	8005f46 <readID+0x132>
        return 0x8031;
 8005f40:	f248 0331 	movw	r3, #32817	; 0x8031
 8005f44:	e0a0      	b.n	8006088 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8005f46:	20ef      	movs	r0, #239	; 0xef
 8005f48:	f7ff ff3d 	bl	8005dc6 <readReg40>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8005f50:	89fb      	ldrh	r3, [r7, #14]
 8005f52:	f249 3227 	movw	r2, #37671	; 0x9327
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d102      	bne.n	8005f60 <readID+0x14c>
        return 0x9327;
 8005f5a:	f249 3327 	movw	r3, #37671	; 0x9327
 8005f5e:	e093      	b.n	8006088 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8005f60:	20fe      	movs	r0, #254	; 0xfe
 8005f62:	f7ff ff15 	bl	8005d90 <readReg32>
 8005f66:	4603      	mov	r3, r0
 8005f68:	0a1b      	lsrs	r3, r3, #8
 8005f6a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8005f6c:	89fb      	ldrh	r3, [r7, #14]
 8005f6e:	f242 0253 	movw	r2, #8275	; 0x2053
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d102      	bne.n	8005f7c <readID+0x168>
        return 0x2053;
 8005f76:	f242 0353 	movw	r3, #8275	; 0x2053
 8005f7a:	e085      	b.n	8006088 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8005f7c:	2004      	movs	r0, #4
 8005f7e:	f7ff ff07 	bl	8005d90 <readReg32>
 8005f82:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	0c1b      	lsrs	r3, r3, #16
 8005f88:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d122      	bne.n	8005fda <readID+0x1c6>
 8005f94:	89fb      	ldrh	r3, [r7, #14]
 8005f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f9a:	d11e      	bne.n	8005fda <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8005f9c:	4a3c      	ldr	r2, [pc, #240]	; (8006090 <readID+0x27c>)
 8005f9e:	1d3b      	adds	r3, r7, #4
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	8019      	strh	r1, [r3, #0]
 8005fa6:	3302      	adds	r3, #2
 8005fa8:	0c12      	lsrs	r2, r2, #16
 8005faa:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8005fac:	1d3b      	adds	r3, r7, #4
 8005fae:	2203      	movs	r2, #3
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	20b9      	movs	r0, #185	; 0xb9
 8005fb4:	f7ff f9e3 	bl	800537e <pushCommand>
        msb = readReg(0xD0,0);
 8005fb8:	2100      	movs	r1, #0
 8005fba:	20d0      	movs	r0, #208	; 0xd0
 8005fbc:	f7ff fe2e 	bl	8005c1c <readReg>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8005fc4:	79fb      	ldrb	r3, [r7, #7]
 8005fc6:	2b99      	cmp	r3, #153	; 0x99
 8005fc8:	d101      	bne.n	8005fce <readID+0x1ba>
 8005fca:	2399      	movs	r3, #153	; 0x99
 8005fcc:	e05c      	b.n	8006088 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8005fce:	79fb      	ldrb	r3, [r7, #7]
 8005fd0:	2b90      	cmp	r3, #144	; 0x90
 8005fd2:	d102      	bne.n	8005fda <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8005fd4:	f249 0390 	movw	r3, #37008	; 0x9090
 8005fd8:	e056      	b.n	8006088 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8005fda:	89fb      	ldrh	r3, [r7, #14]
 8005fdc:	f241 5226 	movw	r2, #5414	; 0x1526
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d102      	bne.n	8005fea <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8005fe4:	f241 5326 	movw	r3, #5414	; 0x1526
 8005fe8:	e04e      	b.n	8006088 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8005fea:	89fb      	ldrh	r3, [r7, #14]
 8005fec:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d102      	bne.n	8005ffa <readID+0x1e6>
        return 0x7735;
 8005ff4:	f247 7335 	movw	r3, #30517	; 0x7735
 8005ff8:	e046      	b.n	8006088 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8005ffa:	89fb      	ldrh	r3, [r7, #14]
 8005ffc:	f248 5252 	movw	r2, #34130	; 0x8552
 8006000:	4293      	cmp	r3, r2
 8006002:	d102      	bne.n	800600a <readID+0x1f6>
        return 0x7789;
 8006004:	f247 7389 	movw	r3, #30601	; 0x7789
 8006008:	e03e      	b.n	8006088 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 800600a:	89fb      	ldrh	r3, [r7, #14]
 800600c:	f64a 4211 	movw	r2, #44049	; 0xac11
 8006010:	4293      	cmp	r3, r2
 8006012:	d102      	bne.n	800601a <readID+0x206>
        return 0xAC11;
 8006014:	f64a 4311 	movw	r3, #44049	; 0xac11
 8006018:	e036      	b.n	8006088 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 800601a:	20d3      	movs	r0, #211	; 0xd3
 800601c:	f7ff feb8 	bl	8005d90 <readReg32>
 8006020:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	0a1b      	lsrs	r3, r3, #8
 8006026:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8006028:	89fb      	ldrh	r3, [r7, #14]
 800602a:	f249 1263 	movw	r2, #37219	; 0x9163
 800602e:	4293      	cmp	r3, r2
 8006030:	d101      	bne.n	8006036 <readID+0x222>
 8006032:	89fb      	ldrh	r3, [r7, #14]
 8006034:	e028      	b.n	8006088 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8006036:	20d3      	movs	r0, #211	; 0xd3
 8006038:	f7ff feaa 	bl	8005d90 <readReg32>
 800603c:	4603      	mov	r3, r0
 800603e:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8006040:	89fb      	ldrh	r3, [r7, #14]
 8006042:	0a1b      	lsrs	r3, r3, #8
 8006044:	b29b      	uxth	r3, r3
 8006046:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	2b93      	cmp	r3, #147	; 0x93
 800604c:	d00b      	beq.n	8006066 <readID+0x252>
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	2b94      	cmp	r3, #148	; 0x94
 8006052:	d008      	beq.n	8006066 <readID+0x252>
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	2b98      	cmp	r3, #152	; 0x98
 8006058:	d005      	beq.n	8006066 <readID+0x252>
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	2b77      	cmp	r3, #119	; 0x77
 800605e:	d002      	beq.n	8006066 <readID+0x252>
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	2b16      	cmp	r3, #22
 8006064:	d101      	bne.n	800606a <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8006066:	89fb      	ldrh	r3, [r7, #14]
 8006068:	e00e      	b.n	8006088 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 800606a:	89fb      	ldrh	r3, [r7, #14]
 800606c:	2bd3      	cmp	r3, #211	; 0xd3
 800606e:	d004      	beq.n	800607a <readID+0x266>
 8006070:	89fb      	ldrh	r3, [r7, #14]
 8006072:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8006076:	4293      	cmp	r3, r2
 8006078:	d101      	bne.n	800607e <readID+0x26a>
        return ret;             //16-bit write-only bus
 800607a:	89fb      	ldrh	r3, [r7, #14]
 800607c:	e004      	b.n	8006088 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 800607e:	2100      	movs	r1, #0
 8006080:	2000      	movs	r0, #0
 8006082:	f7ff fdcb 	bl	8005c1c <readReg>
 8006086:	4603      	mov	r3, r0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	080062e8 	.word	0x080062e8

08006094 <__libc_init_array>:
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	4d0d      	ldr	r5, [pc, #52]	; (80060cc <__libc_init_array+0x38>)
 8006098:	4c0d      	ldr	r4, [pc, #52]	; (80060d0 <__libc_init_array+0x3c>)
 800609a:	1b64      	subs	r4, r4, r5
 800609c:	10a4      	asrs	r4, r4, #2
 800609e:	2600      	movs	r6, #0
 80060a0:	42a6      	cmp	r6, r4
 80060a2:	d109      	bne.n	80060b8 <__libc_init_array+0x24>
 80060a4:	4d0b      	ldr	r5, [pc, #44]	; (80060d4 <__libc_init_array+0x40>)
 80060a6:	4c0c      	ldr	r4, [pc, #48]	; (80060d8 <__libc_init_array+0x44>)
 80060a8:	f000 f8e4 	bl	8006274 <_init>
 80060ac:	1b64      	subs	r4, r4, r5
 80060ae:	10a4      	asrs	r4, r4, #2
 80060b0:	2600      	movs	r6, #0
 80060b2:	42a6      	cmp	r6, r4
 80060b4:	d105      	bne.n	80060c2 <__libc_init_array+0x2e>
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060bc:	4798      	blx	r3
 80060be:	3601      	adds	r6, #1
 80060c0:	e7ee      	b.n	80060a0 <__libc_init_array+0xc>
 80060c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c6:	4798      	blx	r3
 80060c8:	3601      	adds	r6, #1
 80060ca:	e7f2      	b.n	80060b2 <__libc_init_array+0x1e>
 80060cc:	0800636c 	.word	0x0800636c
 80060d0:	0800636c 	.word	0x0800636c
 80060d4:	0800636c 	.word	0x0800636c
 80060d8:	08006370 	.word	0x08006370

080060dc <__retarget_lock_acquire_recursive>:
 80060dc:	4770      	bx	lr

080060de <__retarget_lock_release_recursive>:
 80060de:	4770      	bx	lr

080060e0 <memset>:
 80060e0:	4402      	add	r2, r0
 80060e2:	4603      	mov	r3, r0
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d100      	bne.n	80060ea <memset+0xa>
 80060e8:	4770      	bx	lr
 80060ea:	f803 1b01 	strb.w	r1, [r3], #1
 80060ee:	e7f9      	b.n	80060e4 <memset+0x4>

080060f0 <cleanup_glue>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	460c      	mov	r4, r1
 80060f4:	6809      	ldr	r1, [r1, #0]
 80060f6:	4605      	mov	r5, r0
 80060f8:	b109      	cbz	r1, 80060fe <cleanup_glue+0xe>
 80060fa:	f7ff fff9 	bl	80060f0 <cleanup_glue>
 80060fe:	4621      	mov	r1, r4
 8006100:	4628      	mov	r0, r5
 8006102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006106:	f000 b869 	b.w	80061dc <_free_r>
	...

0800610c <_reclaim_reent>:
 800610c:	4b2c      	ldr	r3, [pc, #176]	; (80061c0 <_reclaim_reent+0xb4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4283      	cmp	r3, r0
 8006112:	b570      	push	{r4, r5, r6, lr}
 8006114:	4604      	mov	r4, r0
 8006116:	d051      	beq.n	80061bc <_reclaim_reent+0xb0>
 8006118:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800611a:	b143      	cbz	r3, 800612e <_reclaim_reent+0x22>
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d14a      	bne.n	80061b8 <_reclaim_reent+0xac>
 8006122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006124:	6819      	ldr	r1, [r3, #0]
 8006126:	b111      	cbz	r1, 800612e <_reclaim_reent+0x22>
 8006128:	4620      	mov	r0, r4
 800612a:	f000 f857 	bl	80061dc <_free_r>
 800612e:	6961      	ldr	r1, [r4, #20]
 8006130:	b111      	cbz	r1, 8006138 <_reclaim_reent+0x2c>
 8006132:	4620      	mov	r0, r4
 8006134:	f000 f852 	bl	80061dc <_free_r>
 8006138:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800613a:	b111      	cbz	r1, 8006142 <_reclaim_reent+0x36>
 800613c:	4620      	mov	r0, r4
 800613e:	f000 f84d 	bl	80061dc <_free_r>
 8006142:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006144:	b111      	cbz	r1, 800614c <_reclaim_reent+0x40>
 8006146:	4620      	mov	r0, r4
 8006148:	f000 f848 	bl	80061dc <_free_r>
 800614c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800614e:	b111      	cbz	r1, 8006156 <_reclaim_reent+0x4a>
 8006150:	4620      	mov	r0, r4
 8006152:	f000 f843 	bl	80061dc <_free_r>
 8006156:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006158:	b111      	cbz	r1, 8006160 <_reclaim_reent+0x54>
 800615a:	4620      	mov	r0, r4
 800615c:	f000 f83e 	bl	80061dc <_free_r>
 8006160:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006162:	b111      	cbz	r1, 800616a <_reclaim_reent+0x5e>
 8006164:	4620      	mov	r0, r4
 8006166:	f000 f839 	bl	80061dc <_free_r>
 800616a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800616c:	b111      	cbz	r1, 8006174 <_reclaim_reent+0x68>
 800616e:	4620      	mov	r0, r4
 8006170:	f000 f834 	bl	80061dc <_free_r>
 8006174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006176:	b111      	cbz	r1, 800617e <_reclaim_reent+0x72>
 8006178:	4620      	mov	r0, r4
 800617a:	f000 f82f 	bl	80061dc <_free_r>
 800617e:	69a3      	ldr	r3, [r4, #24]
 8006180:	b1e3      	cbz	r3, 80061bc <_reclaim_reent+0xb0>
 8006182:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006184:	4620      	mov	r0, r4
 8006186:	4798      	blx	r3
 8006188:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800618a:	b1b9      	cbz	r1, 80061bc <_reclaim_reent+0xb0>
 800618c:	4620      	mov	r0, r4
 800618e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006192:	f7ff bfad 	b.w	80060f0 <cleanup_glue>
 8006196:	5949      	ldr	r1, [r1, r5]
 8006198:	b941      	cbnz	r1, 80061ac <_reclaim_reent+0xa0>
 800619a:	3504      	adds	r5, #4
 800619c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800619e:	2d80      	cmp	r5, #128	; 0x80
 80061a0:	68d9      	ldr	r1, [r3, #12]
 80061a2:	d1f8      	bne.n	8006196 <_reclaim_reent+0x8a>
 80061a4:	4620      	mov	r0, r4
 80061a6:	f000 f819 	bl	80061dc <_free_r>
 80061aa:	e7ba      	b.n	8006122 <_reclaim_reent+0x16>
 80061ac:	680e      	ldr	r6, [r1, #0]
 80061ae:	4620      	mov	r0, r4
 80061b0:	f000 f814 	bl	80061dc <_free_r>
 80061b4:	4631      	mov	r1, r6
 80061b6:	e7ef      	b.n	8006198 <_reclaim_reent+0x8c>
 80061b8:	2500      	movs	r5, #0
 80061ba:	e7ef      	b.n	800619c <_reclaim_reent+0x90>
 80061bc:	bd70      	pop	{r4, r5, r6, pc}
 80061be:	bf00      	nop
 80061c0:	2000001c 	.word	0x2000001c

080061c4 <__malloc_lock>:
 80061c4:	4801      	ldr	r0, [pc, #4]	; (80061cc <__malloc_lock+0x8>)
 80061c6:	f7ff bf89 	b.w	80060dc <__retarget_lock_acquire_recursive>
 80061ca:	bf00      	nop
 80061cc:	20004236 	.word	0x20004236

080061d0 <__malloc_unlock>:
 80061d0:	4801      	ldr	r0, [pc, #4]	; (80061d8 <__malloc_unlock+0x8>)
 80061d2:	f7ff bf84 	b.w	80060de <__retarget_lock_release_recursive>
 80061d6:	bf00      	nop
 80061d8:	20004236 	.word	0x20004236

080061dc <_free_r>:
 80061dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061de:	2900      	cmp	r1, #0
 80061e0:	d044      	beq.n	800626c <_free_r+0x90>
 80061e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061e6:	9001      	str	r0, [sp, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f1a1 0404 	sub.w	r4, r1, #4
 80061ee:	bfb8      	it	lt
 80061f0:	18e4      	addlt	r4, r4, r3
 80061f2:	f7ff ffe7 	bl	80061c4 <__malloc_lock>
 80061f6:	4a1e      	ldr	r2, [pc, #120]	; (8006270 <_free_r+0x94>)
 80061f8:	9801      	ldr	r0, [sp, #4]
 80061fa:	6813      	ldr	r3, [r2, #0]
 80061fc:	b933      	cbnz	r3, 800620c <_free_r+0x30>
 80061fe:	6063      	str	r3, [r4, #4]
 8006200:	6014      	str	r4, [r2, #0]
 8006202:	b003      	add	sp, #12
 8006204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006208:	f7ff bfe2 	b.w	80061d0 <__malloc_unlock>
 800620c:	42a3      	cmp	r3, r4
 800620e:	d908      	bls.n	8006222 <_free_r+0x46>
 8006210:	6825      	ldr	r5, [r4, #0]
 8006212:	1961      	adds	r1, r4, r5
 8006214:	428b      	cmp	r3, r1
 8006216:	bf01      	itttt	eq
 8006218:	6819      	ldreq	r1, [r3, #0]
 800621a:	685b      	ldreq	r3, [r3, #4]
 800621c:	1949      	addeq	r1, r1, r5
 800621e:	6021      	streq	r1, [r4, #0]
 8006220:	e7ed      	b.n	80061fe <_free_r+0x22>
 8006222:	461a      	mov	r2, r3
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	b10b      	cbz	r3, 800622c <_free_r+0x50>
 8006228:	42a3      	cmp	r3, r4
 800622a:	d9fa      	bls.n	8006222 <_free_r+0x46>
 800622c:	6811      	ldr	r1, [r2, #0]
 800622e:	1855      	adds	r5, r2, r1
 8006230:	42a5      	cmp	r5, r4
 8006232:	d10b      	bne.n	800624c <_free_r+0x70>
 8006234:	6824      	ldr	r4, [r4, #0]
 8006236:	4421      	add	r1, r4
 8006238:	1854      	adds	r4, r2, r1
 800623a:	42a3      	cmp	r3, r4
 800623c:	6011      	str	r1, [r2, #0]
 800623e:	d1e0      	bne.n	8006202 <_free_r+0x26>
 8006240:	681c      	ldr	r4, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	6053      	str	r3, [r2, #4]
 8006246:	4421      	add	r1, r4
 8006248:	6011      	str	r1, [r2, #0]
 800624a:	e7da      	b.n	8006202 <_free_r+0x26>
 800624c:	d902      	bls.n	8006254 <_free_r+0x78>
 800624e:	230c      	movs	r3, #12
 8006250:	6003      	str	r3, [r0, #0]
 8006252:	e7d6      	b.n	8006202 <_free_r+0x26>
 8006254:	6825      	ldr	r5, [r4, #0]
 8006256:	1961      	adds	r1, r4, r5
 8006258:	428b      	cmp	r3, r1
 800625a:	bf04      	itt	eq
 800625c:	6819      	ldreq	r1, [r3, #0]
 800625e:	685b      	ldreq	r3, [r3, #4]
 8006260:	6063      	str	r3, [r4, #4]
 8006262:	bf04      	itt	eq
 8006264:	1949      	addeq	r1, r1, r5
 8006266:	6021      	streq	r1, [r4, #0]
 8006268:	6054      	str	r4, [r2, #4]
 800626a:	e7ca      	b.n	8006202 <_free_r+0x26>
 800626c:	b003      	add	sp, #12
 800626e:	bd30      	pop	{r4, r5, pc}
 8006270:	20004238 	.word	0x20004238

08006274 <_init>:
 8006274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006276:	bf00      	nop
 8006278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627a:	bc08      	pop	{r3}
 800627c:	469e      	mov	lr, r3
 800627e:	4770      	bx	lr

08006280 <_fini>:
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006282:	bf00      	nop
 8006284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006286:	bc08      	pop	{r3}
 8006288:	469e      	mov	lr, r3
 800628a:	4770      	bx	lr
